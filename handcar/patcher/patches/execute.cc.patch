#
# Copyright (C) [2020] Futurewei Technologies, Inc.
#
# FORCE-RISCV is licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#  http://www.apache.org/licenses/LICENSE-2.0
#
# THIS SOFTWARE IS PROVIDED ON AN "AS IS" BASIS, WITHOUT WARRANTIES OF ANY KIND, EITHER
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO NON-INFRINGEMENT, MERCHANTABILITY OR
# FIT FOR A PARTICULAR PURPOSE.
# See the License for the specific language governing permissions and
# limitations under the License.
#
30c30
<       fprintf(log_file, "0x%01" PRIx8, *(const uint8_t *)data);
---
>       //fprintf(log_file, "0x%01" PRIx8, *(const uint8_t *)data);
33c33
<       fprintf(log_file, "0x%04" PRIx16, *(const uint16_t *)data);
---
>       //fprintf(log_file, "0x%04" PRIx16, *(const uint16_t *)data);
36c36
<       fprintf(log_file, "0x%08" PRIx32, *(const uint32_t *)data);
---
>       //fprintf(log_file, "0x%08" PRIx32, *(const uint32_t *)data);
39c39
<       fprintf(log_file, "0x%016" PRIx64, *(const uint64_t *)data);
---
>       //fprintf(log_file, "0x%016" PRIx64, *(const uint64_t *)data);
46,49c46,49
<         fprintf(log_file, "0x");
<         for (int idx = width / 64 - 1; idx >= 0; --idx) {
<           fprintf(log_file, "%016" PRIx64, arr[idx]);
<         }
---
>         //fprintf(log_file, "0x");
>         //for (int idx = width / 64 - 1; idx >= 0; --idx) {
>         //  fprintf(log_file, "%016" PRIx64, arr[idx]);
>         //}
79c79
<   fprintf(log_file, "core%4" PRId32 ": ", p->get_id());
---
>   //fprintf(log_file, "core%4" PRId32 ": ", p->get_id());
81c81
<   fprintf(log_file, "%1d ", priv);
---
>   //fprintf(log_file, "%1d ", priv);
83c83
<   fprintf(log_file, " (");
---
>   //fprintf(log_file, " (");
85c85
<   fprintf(log_file, ")");
---
>   //fprintf(log_file, ")");
124,128c124,128
<         fprintf(log_file, " e%ld %s%ld l%ld",
<                 p->VU.vsew,
<                 p->VU.vflmul < 1 ? "mf" : "m",
<                 p->VU.vflmul < 1 ? (reg_t)(1 / p->VU.vflmul) : (reg_t)p->VU.vflmul,
<                 p->VU.vl);
---
>         //fprintf(log_file, " e%ld %s%ld l%ld",
>         //        p->VU.vsew,
>         //        p->VU.vflmul < 1 ? "mf" : "m",
>         //        p->VU.vflmul < 1 ? (reg_t)(1 / p->VU.vflmul) : (reg_t)p->VU.vflmul,
>         //        p->VU.vl);
134c134
<         fprintf(log_file, " c%d_%s ", rd, csr_name(rd));
---
>         //fprintf(log_file, " c%d_%s ", rd, csr_name(rd));
136c136
<         fprintf(log_file, " %c%2d ", prefix, rd);
---
>         //fprintf(log_file, " %c%2d ", prefix, rd);
145c145
<     fprintf(log_file, " mem ");
---
>     //fprintf(log_file, " mem ");
150c150
<     fprintf(log_file, " mem ");
---
>     //fprintf(log_file, " mem ");
152c152
<     fprintf(log_file, " ");
---
>     //fprintf(log_file, " ");
155c155
<   fprintf(log_file, "\n");
---
>   //fprintf(log_file, "\n");
259c259
<       if (unlikely(slow_path()))
---
>       if (true || unlikely(slow_path()))
278,279c278,279
<           if (debug && !state.serialized)
<             disasm(fetch.insn);
---
>           //if (debug && !state.serialized)
>           //  disasm(fetch.insn);
