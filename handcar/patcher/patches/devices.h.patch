#
# Copyright (C) [2020] Futurewei Technologies, Inc.
#
# FORCE-RISCV is licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#  http://www.apache.org/licenses/LICENSE-2.0
#
# THIS SOFTWARE IS PROVIDED ON AN "AS IS" BASIS, WITHOUT WARRANTIES OF ANY KIND, EITHER
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO NON-INFRINGEMENT, MERCHANTABILITY OR
# FIT FOR A PARTICULAR PURPOSE.
# See the License for the specific language governing permissions and
# limitations under the License.
#
0a1,2
> // See LICENSE for license details.
> 
5d6
< #include "mmio_plugin.h"
19,95d19
< };
< 
< class bus_t : public abstract_device_t {
<  public:
<   bool load(reg_t addr, size_t len, uint8_t* bytes);
<   bool store(reg_t addr, size_t len, const uint8_t* bytes);
<   void add_device(reg_t addr, abstract_device_t* dev);
< 
<   std::pair<reg_t, abstract_device_t*> find_device(reg_t addr);
< 
<  private:
<   std::map<reg_t, abstract_device_t*> devices;
< };
< 
< class rom_device_t : public abstract_device_t {
<  public:
<   rom_device_t(std::vector<char> data);
<   bool load(reg_t addr, size_t len, uint8_t* bytes);
<   bool store(reg_t addr, size_t len, const uint8_t* bytes);
<   const std::vector<char>& contents() { return data; }
<  private:
<   std::vector<char> data;
< };
< 
< class mem_t : public abstract_device_t {
<  public:
<   mem_t(size_t size) : len(size) {
<     if (!size)
<       throw std::runtime_error("zero bytes of target memory requested");
<     data = (char*)calloc(1, size);
<     if (!data)
<       throw std::runtime_error("couldn't allocate " + std::to_string(size) + " bytes of target memory");
<   }
<   mem_t(const mem_t& that) = delete;
<   ~mem_t() { free(data); }
< 
<   bool load(reg_t addr, size_t len, uint8_t* bytes) { return false; }
<   bool store(reg_t addr, size_t len, const uint8_t* bytes) { return false; }
<   char* contents() { return data; }
<   size_t size() { return len; }
< 
<  private:
<   char* data;
<   size_t len;
< };
< 
< class clint_t : public abstract_device_t {
<  public:
<   clint_t(std::vector<processor_t*>&, uint64_t freq_hz, bool real_time);
<   bool load(reg_t addr, size_t len, uint8_t* bytes);
<   bool store(reg_t addr, size_t len, const uint8_t* bytes);
<   size_t size() { return CLINT_SIZE; }
<   void increment(reg_t inc);
<  private:
<   typedef uint64_t mtime_t;
<   typedef uint64_t mtimecmp_t;
<   typedef uint32_t msip_t;
<   std::vector<processor_t*>& procs;
<   uint64_t freq_hz;
<   bool real_time;
<   uint64_t real_time_ref_secs;
<   uint64_t real_time_ref_usecs;
<   mtime_t mtime;
<   std::vector<mtimecmp_t> mtimecmp;
< };
< 
< class mmio_plugin_device_t : public abstract_device_t {
<  public:
<   mmio_plugin_device_t(const std::string& name, const std::string& args);
<   virtual ~mmio_plugin_device_t() override;
< 
<   virtual bool load(reg_t addr, size_t len, uint8_t* bytes) override;
<   virtual bool store(reg_t addr, size_t len, const uint8_t* bytes) override;
< 
<  private:
<   mmio_plugin_t plugin;
<   void* user_data;
