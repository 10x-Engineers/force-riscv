#
# Copyright (C) [2020] Futurewei Technologies, Inc.
#
# FORCE-RISCV is licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#  http://www.apache.org/licenses/LICENSE-2.0
#
# THIS SOFTWARE IS PROVIDED ON AN "AS IS" BASIS, WITHOUT WARRANTIES OF ANY KIND, EITHER
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO NON-INFRINGEMENT, MERCHANTABILITY OR
# FIT FOR A PARTICULAR PURPOSE.
# See the License for the specific language governing permissions and
# limitations under the License.
#
20a21,23
> //DEBUG
> #include <iostream>
> 
148a152,167
> #include <typeinfo>
> extern const char* xpr_arch_name[];
> extern const char* fpr_arch_name[];
> extern "C" {
>   // update_generator_register function: for the given cpuid, this callback function is called by the simulator to notify the user that a register has been accessed.
>   //
>   //  inputs: 
>   //      uint32_t cpuid -- refers to the processor ID
>   //      const char* pRegisterName -- the name of the register (programmer's name)
>   //      uint64_t value -- the data stored in the register after update
>   //      uint64_t mask -- 1's indicate relevant bits
>   //      const char* pAccessType -- indicates if the access was a read or write.
>   //
>   void update_generator_register(uint32_t cpuid, const char* pRegisterName, uint64_t value, uint64_t mask, const char* pAccessType);  //!< update generator register information when step an instruction
> }
> 
152a172,185
>   regfile_t(size_t id): pid(id) {};
>   void set_pid(size_t id) {pid = id;};
>   void do_callback(size_t i, T value, const char access_type[]) const
>   {
>     uint64_t mask = 0xffffffffffffffffull;
>     uint64_t buffer = 0;
> 
>     memcpy(&buffer, &value, sizeof(uint64_t) < sizeof(T) ? sizeof(uint64_t) : sizeof(T));
> 
>     if(typeid(T) == typeid(float128_t))
>         update_generator_register(pid, fpr_arch_name[i], buffer, mask, access_type); 
>     else
>         update_generator_register(pid, xpr_arch_name[i], buffer, mask, access_type);
>   }
156a190,196
> 
>     do_callback(i, value, "write");
>   }
>   void writeNoCallback(size_t i, T value)
>   {
>     if (!zero_reg || i != 0)
>       data[i] = value;
159a200,204
>     do_callback(i, data[i], "read");
>     return data[i];
>   }
>   const T& readNoCallback(size_t i) const
>   {
170a216
>   size_t pid;
227,229c273,275
< #define dirty_fp_state  STATE.sstatus->dirty(SSTATUS_FS)
< #define dirty_ext_state STATE.sstatus->dirty(SSTATUS_XS)
< #define dirty_vs_state  STATE.sstatus->dirty(SSTATUS_VS)
---
> #define dirty_fp_state  (STATE.sstatus->dirty(SSTATUS_FS), update_generator_register(STATE.pid, "sstatus", STATE.sstatus->read(), 0xffffffffffffffffull, "write"))
> #define dirty_ext_state (STATE.sstatus->dirty(SSTATUS_XS), update_generator_register(STATE.pid, "sstatus", STATE.sstatus->read(), 0xffffffffffffffffull, "write"))
> #define dirty_vs_state  (STATE.sstatus->dirty(SSTATUS_VS), update_generator_register(STATE.pid, "sstatus", STATE.sstatus->read(), 0xffffffffffffffffull, "write"))
259a306
>     assert(P.VU.vl <= P.VU.vlmax); \
284a332,333
> 			       /*std::cout << "IN set_fp_exceptions, exceptions code is nonzero: " << softfloat_exceptionFlags << std::endl;*/\
>                                update_generator_register(STATE.pid, "fcsr", P.get_csr_api(CSR_FCSR), 0xffffffffffffffffull, "write"); \
426c475
<     bool skip = ((P.VU.elt<uint64_t>(0, midx) >> mpos) & 0x1) == 0; \
---
>     bool skip = ((P.VU.elt_val<uint64_t>(0, midx) >> mpos) & 0x1) == 0; \
428c477
<         continue; \
---
>       continue; \
596a646
>   /*std::cout << "IN VI_CHECK_REDUCTION, is the is_wide test satisfied (vsew * 2 <= ELEN)?" << bool(P.VU.vsew * 2 <= P.VU.ELEN) << std::endl;*/ \
600a651
>   /* std::cout << "IN VI_CHECK_REDUCTION, is the alignment correct?" << bool(is_aligned(insn.rs2(), P.VU.vflmul)) << std::endl;*/ \
601a653
>   /*std::cout << "IN VI_CHECK_REDUCTION, is vstart zero?" << bool(P.VU.vstart == 0) << std::endl;*/ \
651c703
<     uint64_t &vdi = P.VU.elt<uint64_t>(insn.rd(), midx, true); \
---
>     uint64_t &vdi = P.VU.elt_ref<uint64_t>(insn.rd(), midx, true); \
667,669c719,721
<     uint64_t vs2 = P.VU.elt<uint64_t>(insn.rs2(), midx); \
<     uint64_t vs1 = P.VU.elt<uint64_t>(insn.rs1(), midx); \
<     uint64_t &res = P.VU.elt<uint64_t>(insn.rd(), midx, true); \
---
>     uint64_t vs2 = P.VU.elt_val<uint64_t>(insn.rs2(), midx); \
>     uint64_t vs1 = P.VU.elt_val<uint64_t>(insn.rs1(), midx); \
>     uint64_t &res = P.VU.elt_ref<uint64_t>(insn.rd(), midx, true); \
708,710c760,762
<   type_sew_t<x>::type &vd = P.VU.elt<type_sew_t<x>::type>(rd_num, i, true); \
<   type_sew_t<x>::type vs1 = P.VU.elt<type_sew_t<x>::type>(rs1_num, i); \
<   type_sew_t<x>::type vs2 = P.VU.elt<type_sew_t<x>::type>(rs2_num, i); \
---
>   type_sew_t<x>::type &vd = P.VU.elt_ref<type_sew_t<x>::type>(rd_num, i, true); \
>   type_sew_t<x>::type vs1 = P.VU.elt_val<type_sew_t<x>::type>(rs1_num, i); \
>   type_sew_t<x>::type vs2 = P.VU.elt_val<type_sew_t<x>::type>(rs2_num, i); \
715,717c767,769
<   type_usew_t<x>::type &vd = P.VU.elt<type_usew_t<x>::type>(rd_num, i, true); \
<   type_usew_t<x>::type vs1 = P.VU.elt<type_usew_t<x>::type>(rs1_num, i); \
<   type_usew_t<x>::type vs2 = P.VU.elt<type_usew_t<x>::type>(rs2_num, i);
---
>   type_usew_t<x>::type &vd = P.VU.elt_ref<type_usew_t<x>::type>(rd_num, i, true); \
>   type_usew_t<x>::type vs1 = P.VU.elt_val<type_usew_t<x>::type>(rs1_num, i); \
>   type_usew_t<x>::type vs2 = P.VU.elt_val<type_usew_t<x>::type>(rs2_num, i);
720c772
<   type_usew_t<x>::type &vd = P.VU.elt<type_usew_t<x>::type>(rd_num, i, true); \
---
>   type_usew_t<x>::type &vd = P.VU.elt_ref<type_usew_t<x>::type>(rd_num, i, true); \
722c774
<   type_usew_t<x>::type vs2 = P.VU.elt<type_usew_t<x>::type>(rs2_num, i);
---
>   type_usew_t<x>::type vs2 = P.VU.elt_val<type_usew_t<x>::type>(rs2_num, i);
725c777
<   type_usew_t<x>::type &vd = P.VU.elt<type_usew_t<x>::type>(rd_num, i, true); \
---
>   type_usew_t<x>::type &vd = P.VU.elt_ref<type_usew_t<x>::type>(rd_num, i, true); \
727c779
<   type_usew_t<x>::type vs2 = P.VU.elt<type_usew_t<x>::type>(rs2_num, i);
---
>   type_usew_t<x>::type vs2 = P.VU.elt_val<type_usew_t<x>::type>(rs2_num, i);
730,732c782,784
<   type_sew_t<x>::type &vd = P.VU.elt<type_sew_t<x>::type>(rd_num, i, true); \
<   type_sew_t<x>::type vs1 = P.VU.elt<type_sew_t<x>::type>(rs1_num, i); \
<   type_sew_t<x>::type vs2 = P.VU.elt<type_sew_t<x>::type>(rs2_num, i);
---
>   type_sew_t<x>::type &vd = P.VU.elt_ref<type_sew_t<x>::type>(rd_num, i, true); \
>   type_sew_t<x>::type vs1 = P.VU.elt_val<type_sew_t<x>::type>(rs1_num, i); \
>   type_sew_t<x>::type vs2 = P.VU.elt_val<type_sew_t<x>::type>(rs2_num, i);
735c787
<   type_sew_t<x>::type &vd = P.VU.elt<type_sew_t<x>::type>(rd_num, i, true); \
---
>   type_sew_t<x>::type &vd = P.VU.elt_ref<type_sew_t<x>::type>(rd_num, i, true); \
737c789
<   type_sew_t<x>::type vs2 = P.VU.elt<type_sew_t<x>::type>(rs2_num, i);
---
>   type_sew_t<x>::type vs2 = P.VU.elt_val<type_sew_t<x>::type>(rs2_num, i);
740c792
<   type_sew_t<x>::type &vd = P.VU.elt<type_sew_t<x>::type>(rd_num, i, true); \
---
>   type_sew_t<x>::type &vd = P.VU.elt_ref<type_sew_t<x>::type>(rd_num, i, true); \
742c794
<   type_sew_t<x>::type vs2 = P.VU.elt<type_sew_t<x>::type>(rs2_num, i);
---
>   type_sew_t<x>::type vs2 = P.VU.elt_val<type_sew_t<x>::type>(rs2_num, i);
745,746c797,798
<   type_sew_t<x>::type &vd = P.VU.elt<type_sew_t<x>::type>(rd_num, i, true); \
<   type_usew_t<x>::type vs2 = P.VU.elt<type_usew_t<x>::type>(rs2_num, RS1);
---
>   type_sew_t<x>::type &vd = P.VU.elt_ref<type_sew_t<x>::type>(rd_num, i, true); \
>   type_usew_t<x>::type vs2 = P.VU.elt_val<type_usew_t<x>::type>(rs2_num, RS1);
749,750c801,802
<   type_usew_t<x>::type vs1 = P.VU.elt<type_usew_t<x>::type>(rs1_num, i); \
<   type_usew_t<x>::type vs2 = P.VU.elt<type_usew_t<x>::type>(rs2_num, i);
---
>   type_usew_t<x>::type vs1 = P.VU.elt_val<type_usew_t<x>::type>(rs1_num, i); \
>   type_usew_t<x>::type vs2 = P.VU.elt_val<type_usew_t<x>::type>(rs2_num, i);
754c806
<   type_usew_t<x>::type vs2 = P.VU.elt<type_usew_t<x>::type>(rs2_num, i);
---
>   type_usew_t<x>::type vs2 = P.VU.elt_val<type_usew_t<x>::type>(rs2_num, i);
757c809
<   type_usew_t<x>::type vs2 = P.VU.elt<type_usew_t<x>::type>(rs2_num, i);
---
>   type_usew_t<x>::type vs2 = P.VU.elt_val<type_usew_t<x>::type>(rs2_num, i);
760,761c812,813
<   type_sew_t<x>::type vs1 = P.VU.elt<type_sew_t<x>::type>(rs1_num, i); \
<   type_sew_t<x>::type vs2 = P.VU.elt<type_sew_t<x>::type>(rs2_num, i);
---
>   type_sew_t<x>::type vs1 = P.VU.elt_val<type_sew_t<x>::type>(rs1_num, i); \
>   type_sew_t<x>::type vs2 = P.VU.elt_val<type_sew_t<x>::type>(rs2_num, i);
765c817
<   type_sew_t<x>::type vs2 = P.VU.elt<type_sew_t<x>::type>(rs2_num, i);
---
>   type_sew_t<x>::type vs2 = P.VU.elt_val<type_sew_t<x>::type>(rs2_num, i);
769c821
<   type_sew_t<x>::type vs2 = P.VU.elt<type_sew_t<x>::type>(rs2_num, i);
---
>   type_sew_t<x>::type vs2 = P.VU.elt_val<type_sew_t<x>::type>(rs2_num, i);
772,773c824,825
<   auto &vd = P.VU.elt<type_sew_t<x>::type>(rd_num, i, true); \
<   auto vs2 = P.VU.elt<type_sew_t<x>::type>(rs2_num, i + off);
---
>   auto &vd = P.VU.elt_ref<type_sew_t<x>::type>(rd_num, i, true); \
>   auto vs2 = P.VU.elt_val<type_sew_t<x>::type>(rs2_num, i + off);
776,777c828,829
<   auto &vd = P.VU.elt<type_sew_t<x>::type>(rd_num, i, true); \
<   auto vs2 = P.VU.elt<type_sew_t<x>::type>(rs2_num, i - offset);
---
>   auto &vd = P.VU.elt_ref<type_sew_t<x>::type>(rd_num, i, true); \
>   auto vs2 = P.VU.elt_val<type_sew_t<x>::type>(rs2_num, i - offset);
780,782c832,834
<   auto &vd = P.VU.elt<type_usew_t<sew1>::type>(rd_num, i, true); \
<   auto vs2_u = P.VU.elt<type_usew_t<sew2>::type>(rs2_num, i); \
<   auto vs2 = P.VU.elt<type_sew_t<sew2>::type>(rs2_num, i); \
---
>   auto &vd = P.VU.elt_ref<type_usew_t<sew1>::type>(rd_num, i, true); \
>   auto vs2_u = P.VU.elt_val<type_usew_t<sew2>::type>(rs2_num, i); \
>   auto vs2 = P.VU.elt_val<type_sew_t<sew2>::type>(rs2_num, i); \
786,788c838,840
<   auto &vd = P.VU.elt<type_usew_t<sew1>::type>(rd_num, i, true); \
<   auto vs2_u = P.VU.elt<type_usew_t<sew2>::type>(rs2_num, i); \
<   auto vs2 = P.VU.elt<type_sew_t<sew2>::type>(rs2_num, i); \
---
>   auto &vd = P.VU.elt_ref<type_usew_t<sew1>::type>(rd_num, i, true); \
>   auto vs2_u = P.VU.elt_val<type_usew_t<sew2>::type>(rs2_num, i); \
>   auto vs2 = P.VU.elt_val<type_sew_t<sew2>::type>(rs2_num, i); \
792,795c844,847
<   auto &vd = P.VU.elt<type_usew_t<sew1>::type>(rd_num, i, true); \
<   auto vs2_u = P.VU.elt<type_usew_t<sew2>::type>(rs2_num, i); \
<   auto vs2 = P.VU.elt<type_sew_t<sew2>::type>(rs2_num, i); \
<   auto vs1 = P.VU.elt<type_sew_t<sew1>::type>(rs1_num, i);
---
>   auto &vd = P.VU.elt_ref<type_usew_t<sew1>::type>(rd_num, i, true); \
>   auto vs2_u = P.VU.elt_val<type_usew_t<sew2>::type>(rs2_num, i); \
>   auto vs2 = P.VU.elt_val<type_sew_t<sew2>::type>(rs2_num, i); \
>   auto vs1 = P.VU.elt_val<type_sew_t<sew1>::type>(rs1_num, i);
798c850
<   auto vs2 = P.VU.elt<type_sew_t<x>::type>(rs2_num, i); \
---
>   auto vs2 = P.VU.elt_val<type_sew_t<x>::type>(rs2_num, i); \
801c853
<   auto &vd = P.VU.elt<uint64_t>(rd_num, midx, true);
---
>   auto &vd = P.VU.elt_ref<uint64_t>(rd_num, midx, true);
804,806c856,858
<   auto vs2 = P.VU.elt<type_sew_t<x>::type>(rs2_num, i); \
<   auto vs1 = P.VU.elt<type_sew_t<x>::type>(rs1_num, i); \
<   auto &vd = P.VU.elt<uint64_t>(rd_num, midx, true);
---
>   auto vs2 = P.VU.elt_val<type_sew_t<x>::type>(rs2_num, i); \
>   auto vs1 = P.VU.elt_val<type_sew_t<x>::type>(rs1_num, i); \
>   auto &vd = P.VU.elt_ref<uint64_t>(rd_num, midx, true);
809c861
<   auto vs2 = P.VU.elt<type_sew_t<x>::type>(rs2_num, i); \
---
>   auto vs2 = P.VU.elt_val<type_sew_t<x>::type>(rs2_num, i); \
812c864
<   auto &vd = P.VU.elt<type_sew_t<x>::type>(rd_num, i, true);
---
>   auto &vd = P.VU.elt_ref<type_sew_t<x>::type>(rd_num, i, true);
815,817c867,869
<   auto vs2 = P.VU.elt<type_sew_t<x>::type>(rs2_num, i); \
<   auto vs1 = P.VU.elt<type_sew_t<x>::type>(rs1_num, i); \
<   auto &vd = P.VU.elt<type_sew_t<x>::type>(rd_num, i, true);
---
>   auto vs2 = P.VU.elt_val<type_sew_t<x>::type>(rs2_num, i); \
>   auto vs1 = P.VU.elt_val<type_sew_t<x>::type>(rs1_num, i); \
>   auto &vd = P.VU.elt_ref<type_sew_t<x>::type>(rd_num, i, true);
878a931
>   /*std::cout << "IN VI_VV_ULOOP_CMP start." << std::endl;*/\
879a933
>   /*std::cout << "IN VI_VV_ULOOP_CMP passed the VI_CHECK_MSS, sew is: " << std::hex << P.VU.vsew << std::endl;*/\
893a948
>   /*std::cout << "IN VI_VV_ULOOP_CMP passed VV_UCMP_PARAMS " << std::endl;*/\
957,958c1012,1013
<   auto &vd_0_des = P.VU.elt<type_sew_t<x>::type>(rd_num, 0, true); \
<   auto vd_0_res = P.VU.elt<type_sew_t<x>::type>(rs1_num, 0); \
---
>   auto &vd_0_des = P.VU.elt_ref<type_sew_t<x>::type>(rd_num, 0, true); \
>   auto vd_0_res = P.VU.elt_val<type_sew_t<x>::type>(rs1_num, 0); \
961c1016
<     auto vs2 = P.VU.elt<type_sew_t<x>::type>(rs2_num, i); \
---
>     auto vs2 = P.VU.elt_val<type_sew_t<x>::type>(rs2_num, i); \
988,989c1043,1044
<   auto &vd_0_des = P.VU.elt<type_usew_t<x>::type>(rd_num, 0, true); \
<   auto vd_0_res = P.VU.elt<type_usew_t<x>::type>(rs1_num, 0); \
---
>   auto &vd_0_des = P.VU.elt_ref<type_usew_t<x>::type>(rd_num, 0, true); \
>   auto vd_0_res = P.VU.elt_val<type_usew_t<x>::type>(rs1_num, 0); \
992c1047
<     auto vs2 = P.VU.elt<type_usew_t<x>::type>(rs2_num, i);
---
>     auto vs2 = P.VU.elt_val<type_usew_t<x>::type>(rs2_num, i);
1139,1140c1194,1195
<   type_usew_t<sew1>::type &vd = P.VU.elt<type_usew_t<sew1>::type>(rd_num, i, true); \
<   type_usew_t<sew2>::type vs2_u = P.VU.elt<type_usew_t<sew2>::type>(rs2_num, i); \
---
>   type_usew_t<sew1>::type &vd = P.VU.elt_ref<type_usew_t<sew1>::type>(rd_num, i, true); \
>   type_usew_t<sew2>::type vs2_u = P.VU.elt_val<type_usew_t<sew2>::type>(rs2_num, i); \
1142,1143c1197,1198
<   type_sew_t<sew2>::type vs2 = P.VU.elt<type_sew_t<sew2>::type>(rs2_num, i); \
<   type_sew_t<sew1>::type vs1 = P.VU.elt<type_sew_t<sew1>::type>(rs1_num, i); \
---
>   type_sew_t<sew2>::type vs2 = P.VU.elt_val<type_sew_t<sew2>::type>(rs2_num, i); \
>   type_sew_t<sew1>::type vs1 = P.VU.elt_val<type_sew_t<sew1>::type>(rs1_num, i); \
1238,1239c1293,1294
<     sign##16_t vd_w = P.VU.elt<sign##16_t>(rd_num, i); \
<     P.VU.elt<uint16_t>(rd_num, i, true) = \
---
>     sign##16_t vd_w = P.VU.elt_val<sign##16_t>(rd_num, i); \
>     P.VU.elt_ref<uint16_t>(rd_num, i, true) = \
1244,1245c1299,1300
<     sign##32_t vd_w = P.VU.elt<sign##32_t>(rd_num, i); \
<     P.VU.elt<uint32_t>(rd_num, i, true) = \
---
>     sign##32_t vd_w = P.VU.elt_val<sign##32_t>(rd_num, i); \
>     P.VU.elt_ref<uint32_t>(rd_num, i, true) = \
1250,1251c1305,1306
<     sign##64_t vd_w = P.VU.elt<sign##64_t>(rd_num, i); \
<     P.VU.elt<uint64_t>(rd_num, i, true) = \
---
>     sign##64_t vd_w = P.VU.elt_val<sign##64_t>(rd_num, i); \
>     P.VU.elt_ref<uint64_t>(rd_num, i, true) = \
1260,1261c1315,1316
<     sign_d##16_t vd_w = P.VU.elt<sign_d##16_t>(rd_num, i); \
<     P.VU.elt<uint16_t>(rd_num, i, true) = \
---
>     sign_d##16_t vd_w = P.VU.elt_val<sign_d##16_t>(rd_num, i); \
>     P.VU.elt_ref<uint16_t>(rd_num, i, true) = \
1266,1267c1321,1322
<     sign_d##32_t vd_w = P.VU.elt<sign_d##32_t>(rd_num, i); \
<     P.VU.elt<uint32_t>(rd_num, i, true) = \
---
>     sign_d##32_t vd_w = P.VU.elt_val<sign_d##32_t>(rd_num, i); \
>     P.VU.elt_ref<uint32_t>(rd_num, i, true) = \
1272,1273c1327,1328
<     sign_d##64_t vd_w = P.VU.elt<sign_d##64_t>(rd_num, i); \
<     P.VU.elt<uint64_t>(rd_num, i, true) = \
---
>     sign_d##64_t vd_w = P.VU.elt_val<sign_d##64_t>(rd_num, i); \
>     P.VU.elt_ref<uint64_t>(rd_num, i, true) = \
1282,1283c1337,1338
<     sign##16_t &vd_w = P.VU.elt<sign##16_t>(rd_num, i, true); \
<     sign##16_t vs2_w = P.VU.elt<sign##16_t>(rs2_num, i); \
---
>     sign##16_t &vd_w = P.VU.elt_ref<sign##16_t>(rd_num, i, true); \
>     sign##16_t vs2_w = P.VU.elt_val<sign##16_t>(rs2_num, i); \
1288,1289c1343,1344
<     sign##32_t &vd_w = P.VU.elt<sign##32_t>(rd_num, i, true); \
<     sign##32_t vs2_w = P.VU.elt<sign##32_t>(rs2_num, i); \
---
>     sign##32_t &vd_w = P.VU.elt_ref<sign##32_t>(rd_num, i, true); \
>     sign##32_t vs2_w = P.VU.elt_val<sign##32_t>(rs2_num, i); \
1294,1295c1349,1350
<     sign##64_t &vd_w = P.VU.elt<sign##64_t>(rd_num, i, true); \
<     sign##64_t vs2_w = P.VU.elt<sign##64_t>(rs2_num, i); \
---
>     sign##64_t &vd_w = P.VU.elt_ref<sign##64_t>(rd_num, i, true); \
>     sign##64_t vs2_w = P.VU.elt_val<sign##64_t>(rs2_num, i); \
1307,1308c1362,1363
<   auto &vd_0_des = P.VU.elt<type_sew_t<sew2>::type>(rd_num, 0, true); \
<   auto vd_0_res = P.VU.elt<type_sew_t<sew2>::type>(rs1_num, 0); \
---
>   auto &vd_0_des = P.VU.elt_ref<type_sew_t<sew2>::type>(rd_num, 0, true); \
>   auto vd_0_res = P.VU.elt_val<type_sew_t<sew2>::type>(rs1_num, 0); \
1311c1366
<     auto vs2 = P.VU.elt<type_sew_t<sew1>::type>(rs2_num, i);
---
>     auto vs2 = P.VU.elt_val<type_sew_t<sew1>::type>(rs2_num, i);
1335,1336c1390,1391
<   auto &vd_0_des = P.VU.elt<type_usew_t<sew2>::type>(rd_num, 0, true); \
<   auto vd_0_res = P.VU.elt<type_usew_t<sew2>::type>(rs1_num, 0); \
---
>   auto &vd_0_des = P.VU.elt_ref<type_usew_t<sew2>::type>(rd_num, 0, true); \
>   auto vd_0_res = P.VU.elt_val<type_usew_t<sew2>::type>(rs1_num, 0); \
1339c1394
<     auto vs2 = P.VU.elt<type_usew_t<sew1>::type>(rs2_num, i);
---
>     auto vs2 = P.VU.elt_val<type_usew_t<sew1>::type>(rs2_num, i);
1528c1583
<       index[i] = P.VU.elt<uint8_t>(reg_num, i); \
---
>       index[i] = P.VU.elt_val<uint8_t>(reg_num, i); \
1531c1586
<       index[i] = P.VU.elt<uint16_t>(reg_num, i); \
---
>       index[i] = P.VU.elt_val<uint16_t>(reg_num, i); \
1534c1589
<       index[i] = P.VU.elt<uint32_t>(reg_num, i); \
---
>       index[i] = P.VU.elt_val<uint32_t>(reg_num, i); \
1537c1592
<       index[i] = P.VU.elt<uint64_t>(reg_num, i); \
---
>       index[i] = P.VU.elt_val<uint64_t>(reg_num, i); \
1555c1610
<       P.VU.elt<elt_width##_t>(vd + fn * emul, vreg_inx, true) = val; \
---
>       P.VU.elt_ref<elt_width##_t>(vd + fn * emul, vreg_inx, true) = val; \
1576c1631
<           P.VU.elt<uint8_t>(vd + fn * flmul, vreg_inx, true) = \
---
>           P.VU.elt_ref<uint8_t>(vd + fn * flmul, vreg_inx, true) = \
1580c1635
<           P.VU.elt<uint16_t>(vd + fn * flmul, vreg_inx, true) = \
---
>           P.VU.elt_ref<uint16_t>(vd + fn * flmul, vreg_inx, true) = \
1584c1639
<           P.VU.elt<uint32_t>(vd + fn * flmul, vreg_inx, true) = \
---
>           P.VU.elt_ref<uint32_t>(vd + fn * flmul, vreg_inx, true) = \
1588c1643
<           P.VU.elt<uint64_t>(vd + fn * flmul, vreg_inx, true) = \
---
>           P.VU.elt_ref<uint64_t>(vd + fn * flmul, vreg_inx, true) = \
1607c1662
<       elt_width##_t val = P.VU.elt<elt_width##_t>(vs3 + fn * emul, vreg_inx); \
---
>       elt_width##_t val = P.VU.elt_val<elt_width##_t>(vs3 + fn * emul, vreg_inx); \
1631c1686
<           P.VU.elt<uint8_t>(vs3 + fn * flmul, vreg_inx)); \
---
>           P.VU.elt_val<uint8_t>(vs3 + fn * flmul, vreg_inx)); \
1635c1690
<           P.VU.elt<uint16_t>(vs3 + fn * flmul, vreg_inx)); \
---
>           P.VU.elt_val<uint16_t>(vs3 + fn * flmul, vreg_inx)); \
1639c1694
<           P.VU.elt<uint32_t>(vs3 + fn * flmul, vreg_inx)); \
---
>           P.VU.elt_val<uint32_t>(vs3 + fn * flmul, vreg_inx)); \
1643c1698
<           P.VU.elt<uint64_t>(vs3 + fn * flmul, vreg_inx)); \
---
>           P.VU.elt_val<uint64_t>(vs3 + fn * flmul, vreg_inx)); \
1675c1730
<       p->VU.elt<elt_width##_t>(rd_num + fn * emul, vreg_inx, true) = val; \
---
>       p->VU.elt_ref<elt_width##_t>(rd_num + fn * emul, vreg_inx, true) = val; \
1699c1754
<         P.VU.elt<elt_width ## _t>(vd + i, pos, true) = val; \
---
>         P.VU.elt_ref<elt_width ## _t>(vd + i, pos, true) = val; \
1708c1763
<         P.VU.elt<elt_width ## _t>(vd + i, pos, true) = val; \
---
>         P.VU.elt_ref<elt_width ## _t>(vd + i, pos, true) = val; \
1728c1783
<         auto val = P.VU.elt<uint8_t>(vs3 + i, pos); \
---
>         auto val = P.VU.elt_val<uint8_t>(vs3 + i, pos); \
1736c1791
<         auto val = P.VU.elt<uint8_t>(vs3 + i, pos); \
---
>         auto val = P.VU.elt_val<uint8_t>(vs3 + i, pos); \
1778c1833
<       auto vs3 = P.VU.elt< type ## 32_t>(vd, vreg_inx); \
---
>       auto vs3 = P.VU.elt_val< type ## 32_t>(vd, vreg_inx); \
1781c1836
<         P.VU.elt< type ## 32_t>(vd, vreg_inx, true) = val; \
---
>         P.VU.elt_ref< type ## 32_t>(vd, vreg_inx, true) = val; \
1785c1840
<       auto vs3 = P.VU.elt< type ## 64_t>(vd, vreg_inx); \
---
>       auto vs3 = P.VU.elt_val< type ## 64_t>(vd, vreg_inx); \
1788c1843
<         P.VU.elt< type ## 64_t>(vd, vreg_inx, true) = val; \
---
>         P.VU.elt_ref< type ## 64_t>(vd, vreg_inx, true) = val; \
1817c1872
<         P.VU.elt<type##16_t>(rd_num, i, true) = P.VU.elt<type##8_t>(rs2_num, i); \
---
>         P.VU.elt_ref<type##16_t>(rd_num, i, true) = P.VU.elt_val<type##8_t>(rs2_num, i); \
1820c1875
<         P.VU.elt<type##32_t>(rd_num, i, true) = P.VU.elt<type##8_t>(rs2_num, i); \
---
>         P.VU.elt_ref<type##32_t>(rd_num, i, true) = P.VU.elt_val<type##8_t>(rs2_num, i); \
1823c1878
<         P.VU.elt<type##64_t>(rd_num, i, true) = P.VU.elt<type##8_t>(rs2_num, i); \
---
>         P.VU.elt_ref<type##64_t>(rd_num, i, true) = P.VU.elt_val<type##8_t>(rs2_num, i); \
1826c1881
<         P.VU.elt<type##32_t>(rd_num, i, true) = P.VU.elt<type##16_t>(rs2_num, i); \
---
>         P.VU.elt_ref<type##32_t>(rd_num, i, true) = P.VU.elt_val<type##16_t>(rs2_num, i); \
1829c1884
<         P.VU.elt<type##64_t>(rd_num, i, true) = P.VU.elt<type##16_t>(rs2_num, i); \
---
>         P.VU.elt_ref<type##64_t>(rd_num, i, true) = P.VU.elt_val<type##16_t>(rs2_num, i); \
1832c1887
<         P.VU.elt<type##64_t>(rd_num, i, true) = P.VU.elt<type##32_t>(rs2_num, i); \
---
>         P.VU.elt_ref<type##64_t>(rd_num, i, true) = P.VU.elt_val<type##32_t>(rs2_num, i); \
1835c1890
<         P.VU.elt<type##64_t>(rd_num, i, true) = P.VU.elt<type##32_t>(rs2_num, i); \
---
>         P.VU.elt_ref<type##64_t>(rd_num, i, true) = P.VU.elt_val<type##32_t>(rs2_num, i); \
1845a1901
>   /*std::cout << "IN VI_VFP_COMMON about to check for fp and if vsew is 16 bits if EXT_ZFH is supported" << std::endl;*/\
1849a1906
>   /*std::cout << "IN VI_VFP_COMMON passed vsew and fp checks" << std::endl;*/\
1850a1908
>   /*std::cout << "IN VI_VFP_COMMON passed vector check" << std::endl;*/\
1868c1926
<     uint64_t &vdi = P.VU.elt<uint64_t>(rd_num, midx, true); \
---
>     uint64_t &vdi = P.VU.elt_ref<uint64_t>(rd_num, midx, true); \
1872,1873c1930,1931
<   float##width##_t vd_0 = P.VU.elt<float##width##_t>(rd_num, 0); \
<   float##width##_t vs1_0 = P.VU.elt<float##width##_t>(rs1_num, 0); \
---
>   float##width##_t vd_0 = P.VU.elt_val<float##width##_t>(rd_num, 0); \
>   float##width##_t vs1_0 = P.VU.elt_val<float##width##_t>(rs1_num, 0); \
1878c1936
<     float##width##_t vs2 = P.VU.elt<float##width##_t>(rs2_num, i); \
---
>     float##width##_t vs2 = P.VU.elt_val<float##width##_t>(rs2_num, i); \
1883c1941
<   float64_t vd_0 = f64(P.VU.elt<float64_t>(rs1_num, 0).v); \
---
>   float64_t vd_0 = f64(P.VU.elt_val<float64_t>(rs1_num, 0).v); \
1904c1962
<               P.VU.elt<uint16_t>(rd_num, 0, true) = defaultNaNF16UI; \
---
>               P.VU.elt_ref<uint16_t>(rd_num, 0, true) = defaultNaNF16UI; \
1906c1964
<               P.VU.elt<uint16_t>(rd_num, 0, true) = vd_0.v; \
---
>               P.VU.elt_ref<uint16_t>(rd_num, 0, true) = vd_0.v; \
1917c1975
<               P.VU.elt<uint32_t>(rd_num, 0, true) = defaultNaNF32UI; \
---
>               P.VU.elt_ref<uint32_t>(rd_num, 0, true) = defaultNaNF32UI; \
1919c1977
<               P.VU.elt<uint32_t>(rd_num, 0, true) = vd_0.v; \
---
>               P.VU.elt_ref<uint32_t>(rd_num, 0, true) = vd_0.v; \
1930c1988
<               P.VU.elt<uint64_t>(rd_num, 0, true) = defaultNaNF64UI; \
---
>               P.VU.elt_ref<uint64_t>(rd_num, 0, true) = defaultNaNF64UI; \
1932c1990
<               P.VU.elt<uint64_t>(rd_num, 0, true) = vd_0.v; \
---
>               P.VU.elt_ref<uint64_t>(rd_num, 0, true) = vd_0.v; \
1938c1996
<       P.VU.elt<type_sew_t<x>::type>(rd_num, 0, true) = vd_0.v; \
---
>       P.VU.elt_ref<type_sew_t<x>::type>(rd_num, 0, true) = vd_0.v; \
1962,1964c2020,2022
<       float16_t &vd = P.VU.elt<float16_t>(rd_num, i, true); \
<       float16_t vs1 = P.VU.elt<float16_t>(rs1_num, i); \
<       float16_t vs2 = P.VU.elt<float16_t>(rs2_num, i); \
---
>       float16_t &vd = P.VU.elt_ref<float16_t>(rd_num, i, true); \
>       float16_t vs1 = P.VU.elt_val<float16_t>(rs1_num, i); \
>       float16_t vs2 = P.VU.elt_val<float16_t>(rs2_num, i); \
1970,1972c2028,2030
<       float32_t &vd = P.VU.elt<float32_t>(rd_num, i, true); \
<       float32_t vs1 = P.VU.elt<float32_t>(rs1_num, i); \
<       float32_t vs2 = P.VU.elt<float32_t>(rs2_num, i); \
---
>       float32_t &vd = P.VU.elt_ref<float32_t>(rd_num, i, true); \
>       float32_t vs1 = P.VU.elt_val<float32_t>(rs1_num, i); \
>       float32_t vs2 = P.VU.elt_val<float32_t>(rs2_num, i); \
1978,1980c2036,2038
<       float64_t &vd = P.VU.elt<float64_t>(rd_num, i, true); \
<       float64_t vs1 = P.VU.elt<float64_t>(rs1_num, i); \
<       float64_t vs2 = P.VU.elt<float64_t>(rs2_num, i); \
---
>       float64_t &vd = P.VU.elt_ref<float64_t>(rd_num, i, true); \
>       float64_t vs1 = P.VU.elt_val<float64_t>(rs1_num, i); \
>       float64_t vs2 = P.VU.elt_val<float64_t>(rs2_num, i); \
1997,1998c2055,2056
<       float16_t &vd = P.VU.elt<float16_t>(rd_num, i, true); \
<       float16_t vs2 = P.VU.elt<float16_t>(rs2_num, i); \
---
>       float16_t &vd = P.VU.elt_ref<float16_t>(rd_num, i, true); \
>       float16_t vs2 = P.VU.elt_val<float16_t>(rs2_num, i); \
2003,2004c2061,2062
<       float32_t &vd = P.VU.elt<float32_t>(rd_num, i, true); \
<       float32_t vs2 = P.VU.elt<float32_t>(rs2_num, i); \
---
>       float32_t &vd = P.VU.elt_ref<float32_t>(rd_num, i, true); \
>       float32_t vs2 = P.VU.elt_val<float32_t>(rs2_num, i); \
2009,2010c2067,2068
<       float64_t &vd = P.VU.elt<float64_t>(rd_num, i, true); \
<       float64_t vs2 = P.VU.elt<float64_t>(rs2_num, i); \
---
>       float64_t &vd = P.VU.elt_ref<float64_t>(rd_num, i, true); \
>       float64_t vs2 = P.VU.elt_val<float64_t>(rs2_num, i); \
2051a2110,2112
>   /*std::cout << "IN VI_VFP_VV_LOOP_WIDE_REDUCTION and P.VU.vsew is:" << std::hex << P.VU.vsew  << std::endl;*/\
>   /*std::cout << "IN VI_VFP_VV_LOOP_WIDE_REDUCTION and p supports F?:" << p->supports_extension('F')  << std::endl;*/\
>   /*std::cout << "IN VI_VFP_VV_LOOP_WIDE_REDUCTION and p supports D?:" << p->supports_extension('D')  << std::endl;*/\
2052a2114
>   /*std::cout << "IN VI_VFP_VV_LOOP_WIDE_REDUCTION going to call common." << std::endl;*/\
2056a2119
>   /*std::cout << "IN VI_VFP_VV_LOOP_WIDE_REDUCTION passed the checks." << std::endl;*/\
2059c2122
<       float32_t vd_0 = P.VU.elt<float32_t>(rs1_num, 0); \
---
>       float32_t vd_0 = P.VU.elt_val<float32_t>(rs1_num, 0); \
2063c2126
<         float32_t vs2 = f16_to_f32(P.VU.elt<float16_t>(rs2_num, i)); \
---
>         float32_t vs2 = f16_to_f32(P.VU.elt_val<float16_t>(rs2_num, i)); \
2064a2128
>   	/*std::cout << "IN VI_VFP_VV_LOOP_WIDE_REDUCTION gonna check fp exceptions." << std::endl;*/\
2065a2130
>   	/*std::cout << "IN VI_VFP_VV_LOOP_WIDE_REDUCTION passed fp exceptions check." << std::endl;*/\
2070c2135
<       float64_t vd_0 = P.VU.elt<float64_t>(rs1_num, 0); \
---
>       float64_t vd_0 = P.VU.elt_val<float64_t>(rs1_num, 0); \
2074c2139
<         float64_t vs2 = f32_to_f64(P.VU.elt<float32_t>(rs2_num, i)); \
---
>         float64_t vs2 = f32_to_f64(P.VU.elt_val<float32_t>(rs2_num, i)); \
2075a2141
>   	/*std::cout << "IN VI_VFP_VV_LOOP_WIDE_REDUCTION gonna check fp exceptions." << std::endl;*/\
2076a2143
>   	/*std::cout << "IN VI_VFP_VV_LOOP_WIDE_REDUCTION passed fp exceptions check." << std::endl;*/\
2080a2148
>       /* std::cout << "IN VI_VFP_VV_LOOP_WIDE_REDUCTION and P.VU.vsew doesn't match an active case. it is instead:" << std::hex << P.VU.vsew  << std::endl;*/\
2090c2158
<       float16_t &vd = P.VU.elt<float16_t>(rd_num, i, true); \
---
>       float16_t &vd = P.VU.elt_ref<float16_t>(rd_num, i, true); \
2092c2160
<       float16_t vs2 = P.VU.elt<float16_t>(rs2_num, i); \
---
>       float16_t vs2 = P.VU.elt_val<float16_t>(rs2_num, i); \
2098c2166
<       float32_t &vd = P.VU.elt<float32_t>(rd_num, i, true); \
---
>       float32_t &vd = P.VU.elt_ref<float32_t>(rd_num, i, true); \
2100c2168
<       float32_t vs2 = P.VU.elt<float32_t>(rs2_num, i); \
---
>       float32_t vs2 = P.VU.elt_val<float32_t>(rs2_num, i); \
2106c2174
<       float64_t &vd = P.VU.elt<float64_t>(rd_num, i, true); \
---
>       float64_t &vd = P.VU.elt_ref<float64_t>(rd_num, i, true); \
2108c2176
<       float64_t vs2 = P.VU.elt<float64_t>(rs2_num, i); \
---
>       float64_t vs2 = P.VU.elt_val<float64_t>(rs2_num, i); \
2125,2126c2193,2194
<       float16_t vs2 = P.VU.elt<float16_t>(rs2_num, i); \
<       float16_t vs1 = P.VU.elt<float16_t>(rs1_num, i); \
---
>       float16_t vs2 = P.VU.elt_val<float16_t>(rs2_num, i); \
>       float16_t vs1 = P.VU.elt_val<float16_t>(rs1_num, i); \
2133,2134c2201,2202
<       float32_t vs2 = P.VU.elt<float32_t>(rs2_num, i); \
<       float32_t vs1 = P.VU.elt<float32_t>(rs1_num, i); \
---
>       float32_t vs2 = P.VU.elt_val<float32_t>(rs2_num, i); \
>       float32_t vs1 = P.VU.elt_val<float32_t>(rs1_num, i); \
2141,2142c2209,2210
<       float64_t vs2 = P.VU.elt<float64_t>(rs2_num, i); \
<       float64_t vs1 = P.VU.elt<float64_t>(rs1_num, i); \
---
>       float64_t vs2 = P.VU.elt_val<float64_t>(rs2_num, i); \
>       float64_t vs1 = P.VU.elt_val<float64_t>(rs1_num, i); \
2159,2160c2227,2228
<       float32_t &vd = P.VU.elt<float32_t>(rd_num, i, true); \
<       float32_t vs2 = f16_to_f32(P.VU.elt<float16_t>(rs2_num, i)); \
---
>       float32_t &vd = P.VU.elt_ref<float32_t>(rd_num, i, true); \
>       float32_t vs2 = f16_to_f32(P.VU.elt_val<float16_t>(rs2_num, i)); \
2167,2168c2235,2236
<       float64_t &vd = P.VU.elt<float64_t>(rd_num, i, true); \
<       float64_t vs2 = f32_to_f64(P.VU.elt<float32_t>(rs2_num, i)); \
---
>       float64_t &vd = P.VU.elt_ref<float64_t>(rd_num, i, true); \
>       float64_t vs2 = f32_to_f64(P.VU.elt_val<float32_t>(rs2_num, i)); \
2187,2189c2255,2257
<       float32_t &vd = P.VU.elt<float32_t>(rd_num, i, true); \
<       float32_t vs2 = f16_to_f32(P.VU.elt<float16_t>(rs2_num, i)); \
<       float32_t vs1 = f16_to_f32(P.VU.elt<float16_t>(rs1_num, i)); \
---
>       float32_t &vd = P.VU.elt_ref<float32_t>(rd_num, i, true); \
>       float32_t vs2 = f16_to_f32(P.VU.elt_val<float16_t>(rs2_num, i)); \
>       float32_t vs1 = f16_to_f32(P.VU.elt_val<float16_t>(rs1_num, i)); \
2195,2197c2263,2265
<       float64_t &vd = P.VU.elt<float64_t>(rd_num, i, true); \
<       float64_t vs2 = f32_to_f64(P.VU.elt<float32_t>(rs2_num, i)); \
<       float64_t vs1 = f32_to_f64(P.VU.elt<float32_t>(rs1_num, i)); \
---
>       float64_t &vd = P.VU.elt_ref<float64_t>(rd_num, i, true); \
>       float64_t vs2 = f32_to_f64(P.VU.elt_val<float32_t>(rs2_num, i)); \
>       float64_t vs1 = f32_to_f64(P.VU.elt_val<float32_t>(rs1_num, i)); \
2214,2215c2282,2283
<       float32_t &vd = P.VU.elt<float32_t>(rd_num, i, true); \
<       float32_t vs2 = P.VU.elt<float32_t>(rs2_num, i); \
---
>       float32_t &vd = P.VU.elt_ref<float32_t>(rd_num, i, true); \
>       float32_t vs2 = P.VU.elt_val<float32_t>(rs2_num, i); \
2222,2223c2290,2291
<       float64_t &vd = P.VU.elt<float64_t>(rd_num, i, true); \
<       float64_t vs2 = P.VU.elt<float64_t>(rs2_num, i); \
---
>       float64_t &vd = P.VU.elt_ref<float64_t>(rd_num, i, true); \
>       float64_t vs2 = P.VU.elt_val<float64_t>(rs2_num, i); \
2240,2242c2308,2310
<       float32_t &vd = P.VU.elt<float32_t>(rd_num, i, true); \
<       float32_t vs2 = P.VU.elt<float32_t>(rs2_num, i); \
<       float32_t vs1 = f16_to_f32(P.VU.elt<float16_t>(rs1_num, i)); \
---
>       float32_t &vd = P.VU.elt_ref<float32_t>(rd_num, i, true); \
>       float32_t vs2 = P.VU.elt_val<float32_t>(rs2_num, i); \
>       float32_t vs1 = f16_to_f32(P.VU.elt_val<float16_t>(rs1_num, i)); \
2248,2250c2316,2318
<       float64_t &vd = P.VU.elt<float64_t>(rd_num, i, true); \
<       float64_t vs2 = P.VU.elt<float64_t>(rs2_num, i); \
<       float64_t vs1 = f32_to_f64(P.VU.elt<float32_t>(rs1_num, i)); \
---
>       float64_t &vd = P.VU.elt_ref<float64_t>(rd_num, i, true); \
>       float64_t vs2 = P.VU.elt_val<float64_t>(rs2_num, i); \
>       float64_t vs1 = f32_to_f64(P.VU.elt_val<float32_t>(rs1_num, i)); \
