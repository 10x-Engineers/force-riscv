#
# Copyright (C) [2020] Futurewei Technologies, Inc.
#
# FORCE-RISCV is licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#  http://www.apache.org/licenses/LICENSE-2.0
#
# THIS SOFTWARE IS PROVIDED ON AN "AS IS" BASIS, WITHOUT WARRANTIES OF ANY KIND, EITHER
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO NON-INFRINGEMENT, MERCHANTABILITY OR
# FIT FOR A PARTICULAR PURPOSE.
# See the License for the specific language governing permissions and
# limitations under the License.
#
20a21,23
> //DEBUG
> #include <iostream>
> 
141a145,160
> #include <typeinfo>
> extern const char* xpr_arch_name[];
> extern const char* fpr_arch_name[];
> extern "C" {
>   // update_generator_register function: for the given cpuid, this callback function is called by the simulator to notify the user that a register has been accessed.
>   //
>   //  inputs: 
>   //      uint32_t cpuid -- refers to the processor ID
>   //      const char* pRegisterName -- the name of the register (programmer's name)
>   //      uint64_t value -- the data stored in the register after update
>   //      uint64_t mask -- 1's indicate relevant bits
>   //      const char* pAccessType -- indicates if the access was a read or write.
>   //
>   void update_generator_register(uint32_t cpuid, const char* pRegisterName, uint64_t value, uint64_t mask, const char* pAccessType);  //!< update generator register information when step an instruction
> }
> 
145a165,178
>   regfile_t(size_t id): pid(id) {};
>   void set_pid(size_t id) {pid = id;};
>   void do_callback(size_t i, T value, const char access_type[]) const
>   {
>     uint64_t mask = 0xffffffffffffffffull;
>     uint64_t buffer = 0;
> 
>     memcpy(&buffer, &value, sizeof(uint64_t) < sizeof(T) ? sizeof(uint64_t) : sizeof(T));
> 
>     if(typeid(T) == typeid(float128_t))
>         update_generator_register(pid, fpr_arch_name[i], buffer, mask, access_type); 
>     else
>         update_generator_register(pid, xpr_arch_name[i], buffer, mask, access_type);
>   }
149a183,189
> 
>     do_callback(i, value, "write");
>   }
>   void writeNoCallback(size_t i, T value)
>   {
>     if (!zero_reg || i != 0)
>       data[i] = value;
152a193,197
>     do_callback(i, data[i], "read");
>     return data[i];
>   }
>   const T& readNoCallback(size_t i) const
>   {
163a209
>   size_t pid;
220,221d265
< #define dirty_fp_state (STATE.mstatus |= MSTATUS_FS | (xlen == 64 ? MSTATUS64_SD : MSTATUS32_SD))
< #define dirty_ext_state (STATE.mstatus |= MSTATUS_XS | (xlen == 64 ? MSTATUS64_SD : MSTATUS32_SD))
222a267,268
> #define dirty_fp_state ((STATE.mstatus |= MSTATUS_FS | (xlen == 64 ? MSTATUS64_SD : MSTATUS32_SD)), update_generator_register(STATE.pid, "mstatus", STATE.mstatus, 0xffffffffffffffffull, "write"))
> #define dirty_ext_state ((STATE.mstatus |= MSTATUS_XS | (xlen == 64 ? MSTATUS64_SD : MSTATUS32_SD)), update_generator_register(STATE.pid, "mstatus", STATE.mstatus, 0xffffffffffffffffull, "write"))
253a300
>     assert(P.VU.vl <= P.VU.vlmax); \
278a326,327
> 			       /*std::cout << "IN set_fp_exceptions, exceptions code is nonzero: " << softfloat_exceptionFlags << std::endl;*/\
>                                update_generator_register(STATE.pid, "fcsr", P.get_csr_api(CSR_FCSR), 0xffffffffffffffffull, "write"); \
415c464
<     bool skip = ((P.VU.elt<uint64_t>(0, midx) >> mpos) & 0x1) == 0; \
---
>     bool skip = ((P.VU.elt_val<uint64_t>(0, midx) >> mpos) & 0x1) == 0; \
417c466
<         continue; \
---
>       continue; \
607a657
>   /*std::cout << "IN VI_CHECK_REDUCTION, is the is_wide test satisfied (vsew * 2 <= ELEN)?" << bool(P.VU.vsew * 2 <= P.VU.ELEN) << std::endl;*/ \
611a662
>   /* std::cout << "IN VI_CHECK_REDUCTION, is the alignment correct?" << bool(is_aligned(insn.rs2(), P.VU.vflmul)) << std::endl;*/ \
612a664
>   /*std::cout << "IN VI_CHECK_REDUCTION, is vstart zero?" << bool(P.VU.vstart == 0) << std::endl;*/ \
662c714
<     uint64_t &vdi = P.VU.elt<uint64_t>(insn.rd(), midx, true); \
---
>     uint64_t &vdi = P.VU.elt_ref<uint64_t>(insn.rd(), midx, true); \
678,680c730,732
<     uint64_t vs2 = P.VU.elt<uint64_t>(insn.rs2(), midx); \
<     uint64_t vs1 = P.VU.elt<uint64_t>(insn.rs1(), midx); \
<     uint64_t &res = P.VU.elt<uint64_t>(insn.rd(), midx, true); \
---
>     uint64_t vs2 = P.VU.elt_val<uint64_t>(insn.rs2(), midx); \
>     uint64_t vs1 = P.VU.elt_val<uint64_t>(insn.rs1(), midx); \
>     uint64_t &res = P.VU.elt_ref<uint64_t>(insn.rd(), midx, true); \
719,721c771,773
<   type_sew_t<x>::type &vd = P.VU.elt<type_sew_t<x>::type>(rd_num, i, true); \
<   type_sew_t<x>::type vs1 = P.VU.elt<type_sew_t<x>::type>(rs1_num, i); \
<   type_sew_t<x>::type vs2 = P.VU.elt<type_sew_t<x>::type>(rs2_num, i); \
---
>   type_sew_t<x>::type &vd = P.VU.elt_ref<type_sew_t<x>::type>(rd_num, i, true); \
>   type_sew_t<x>::type vs1 = P.VU.elt_val<type_sew_t<x>::type>(rs1_num, i); \
>   type_sew_t<x>::type vs2 = P.VU.elt_val<type_sew_t<x>::type>(rs2_num, i); \
726,728c778,780
<   type_usew_t<x>::type &vd = P.VU.elt<type_usew_t<x>::type>(rd_num, i, true); \
<   type_usew_t<x>::type vs1 = P.VU.elt<type_usew_t<x>::type>(rs1_num, i); \
<   type_usew_t<x>::type vs2 = P.VU.elt<type_usew_t<x>::type>(rs2_num, i);
---
>   type_usew_t<x>::type &vd = P.VU.elt_ref<type_usew_t<x>::type>(rd_num, i, true); \
>   type_usew_t<x>::type vs1 = P.VU.elt_val<type_usew_t<x>::type>(rs1_num, i); \
>   type_usew_t<x>::type vs2 = P.VU.elt_val<type_usew_t<x>::type>(rs2_num, i);
731c783
<   type_usew_t<x>::type &vd = P.VU.elt<type_usew_t<x>::type>(rd_num, i, true); \
---
>   type_usew_t<x>::type &vd = P.VU.elt_ref<type_usew_t<x>::type>(rd_num, i, true); \
733c785
<   type_usew_t<x>::type vs2 = P.VU.elt<type_usew_t<x>::type>(rs2_num, i);
---
>   type_usew_t<x>::type vs2 = P.VU.elt_val<type_usew_t<x>::type>(rs2_num, i);
736c788
<   type_usew_t<x>::type &vd = P.VU.elt<type_usew_t<x>::type>(rd_num, i, true); \
---
>   type_usew_t<x>::type &vd = P.VU.elt_ref<type_usew_t<x>::type>(rd_num, i, true); \
738c790
<   type_usew_t<x>::type vs2 = P.VU.elt<type_usew_t<x>::type>(rs2_num, i);
---
>   type_usew_t<x>::type vs2 = P.VU.elt_val<type_usew_t<x>::type>(rs2_num, i);
741,743c793,795
<   type_sew_t<x>::type &vd = P.VU.elt<type_sew_t<x>::type>(rd_num, i, true); \
<   type_sew_t<x>::type vs1 = P.VU.elt<type_sew_t<x>::type>(rs1_num, i); \
<   type_sew_t<x>::type vs2 = P.VU.elt<type_sew_t<x>::type>(rs2_num, i);
---
>   type_sew_t<x>::type &vd = P.VU.elt_ref<type_sew_t<x>::type>(rd_num, i, true); \
>   type_sew_t<x>::type vs1 = P.VU.elt_val<type_sew_t<x>::type>(rs1_num, i); \
>   type_sew_t<x>::type vs2 = P.VU.elt_val<type_sew_t<x>::type>(rs2_num, i);
746c798
<   type_sew_t<x>::type &vd = P.VU.elt<type_sew_t<x>::type>(rd_num, i, true); \
---
>   type_sew_t<x>::type &vd = P.VU.elt_ref<type_sew_t<x>::type>(rd_num, i, true); \
748c800
<   type_sew_t<x>::type vs2 = P.VU.elt<type_sew_t<x>::type>(rs2_num, i);
---
>   type_sew_t<x>::type vs2 = P.VU.elt_val<type_sew_t<x>::type>(rs2_num, i);
751c803
<   type_sew_t<x>::type &vd = P.VU.elt<type_sew_t<x>::type>(rd_num, i, true); \
---
>   type_sew_t<x>::type &vd = P.VU.elt_ref<type_sew_t<x>::type>(rd_num, i, true); \
753c805
<   type_sew_t<x>::type vs2 = P.VU.elt<type_sew_t<x>::type>(rs2_num, i);
---
>   type_sew_t<x>::type vs2 = P.VU.elt_val<type_sew_t<x>::type>(rs2_num, i);
756,757c808,809
<   type_sew_t<x>::type &vd = P.VU.elt<type_sew_t<x>::type>(rd_num, i, true); \
<   type_usew_t<x>::type vs2 = P.VU.elt<type_usew_t<x>::type>(rs2_num, RS1);
---
>   type_sew_t<x>::type &vd = P.VU.elt_ref<type_sew_t<x>::type>(rd_num, i, true); \
>   type_usew_t<x>::type vs2 = P.VU.elt_val<type_usew_t<x>::type>(rs2_num, RS1);
760,761c812,813
<   type_usew_t<x>::type vs1 = P.VU.elt<type_usew_t<x>::type>(rs1_num, i); \
<   type_usew_t<x>::type vs2 = P.VU.elt<type_usew_t<x>::type>(rs2_num, i);
---
>   type_usew_t<x>::type vs1 = P.VU.elt_val<type_usew_t<x>::type>(rs1_num, i); \
>   type_usew_t<x>::type vs2 = P.VU.elt_val<type_usew_t<x>::type>(rs2_num, i);
765c817
<   type_usew_t<x>::type vs2 = P.VU.elt<type_usew_t<x>::type>(rs2_num, i);
---
>   type_usew_t<x>::type vs2 = P.VU.elt_val<type_usew_t<x>::type>(rs2_num, i);
768c820
<   type_usew_t<x>::type vs2 = P.VU.elt<type_usew_t<x>::type>(rs2_num, i);
---
>   type_usew_t<x>::type vs2 = P.VU.elt_val<type_usew_t<x>::type>(rs2_num, i);
771,772c823,824
<   type_sew_t<x>::type vs1 = P.VU.elt<type_sew_t<x>::type>(rs1_num, i); \
<   type_sew_t<x>::type vs2 = P.VU.elt<type_sew_t<x>::type>(rs2_num, i);
---
>   type_sew_t<x>::type vs1 = P.VU.elt_val<type_sew_t<x>::type>(rs1_num, i); \
>   type_sew_t<x>::type vs2 = P.VU.elt_val<type_sew_t<x>::type>(rs2_num, i);
776c828
<   type_sew_t<x>::type vs2 = P.VU.elt<type_sew_t<x>::type>(rs2_num, i);
---
>   type_sew_t<x>::type vs2 = P.VU.elt_val<type_sew_t<x>::type>(rs2_num, i);
780c832
<   type_sew_t<x>::type vs2 = P.VU.elt<type_sew_t<x>::type>(rs2_num, i);
---
>   type_sew_t<x>::type vs2 = P.VU.elt_val<type_sew_t<x>::type>(rs2_num, i);
783,784c835,836
<   auto &vd = P.VU.elt<type_sew_t<x>::type>(rd_num, i, true); \
<   auto vs2 = P.VU.elt<type_sew_t<x>::type>(rs2_num, i + off);
---
>   auto &vd = P.VU.elt_ref<type_sew_t<x>::type>(rd_num, i, true); \
>   auto vs2 = P.VU.elt_val<type_sew_t<x>::type>(rs2_num, i + off);
787,788c839,840
<   auto &vd = P.VU.elt<type_sew_t<x>::type>(rd_num, i, true); \
<   auto vs2 = P.VU.elt<type_sew_t<x>::type>(rs2_num, i - offset);
---
>   auto &vd = P.VU.elt_ref<type_sew_t<x>::type>(rd_num, i, true); \
>   auto vs2 = P.VU.elt_val<type_sew_t<x>::type>(rs2_num, i - offset);
791,793c843,845
<   auto &vd = P.VU.elt<type_usew_t<sew1>::type>(rd_num, i, true); \
<   auto vs2_u = P.VU.elt<type_usew_t<sew2>::type>(rs2_num, i); \
<   auto vs2 = P.VU.elt<type_sew_t<sew2>::type>(rs2_num, i); \
---
>   auto &vd = P.VU.elt_ref<type_usew_t<sew1>::type>(rd_num, i, true); \
>   auto vs2_u = P.VU.elt_val<type_usew_t<sew2>::type>(rs2_num, i); \
>   auto vs2 = P.VU.elt_val<type_sew_t<sew2>::type>(rs2_num, i); \
797,799c849,851
<   auto &vd = P.VU.elt<type_usew_t<sew1>::type>(rd_num, i, true); \
<   auto vs2_u = P.VU.elt<type_usew_t<sew2>::type>(rs2_num, i); \
<   auto vs2 = P.VU.elt<type_sew_t<sew2>::type>(rs2_num, i); \
---
>   auto &vd = P.VU.elt_ref<type_usew_t<sew1>::type>(rd_num, i, true); \
>   auto vs2_u = P.VU.elt_val<type_usew_t<sew2>::type>(rs2_num, i); \
>   auto vs2 = P.VU.elt_val<type_sew_t<sew2>::type>(rs2_num, i); \
803,806c855,858
<   auto &vd = P.VU.elt<type_usew_t<sew1>::type>(rd_num, i, true); \
<   auto vs2_u = P.VU.elt<type_usew_t<sew2>::type>(rs2_num, i); \
<   auto vs2 = P.VU.elt<type_sew_t<sew2>::type>(rs2_num, i); \
<   auto vs1 = P.VU.elt<type_sew_t<sew1>::type>(rs1_num, i);
---
>   auto &vd = P.VU.elt_ref<type_usew_t<sew1>::type>(rd_num, i, true); \
>   auto vs2_u = P.VU.elt_val<type_usew_t<sew2>::type>(rs2_num, i); \
>   auto vs2 = P.VU.elt_val<type_sew_t<sew2>::type>(rs2_num, i); \
>   auto vs1 = P.VU.elt_val<type_sew_t<sew1>::type>(rs1_num, i);
809c861
<   auto vs2 = P.VU.elt<type_sew_t<x>::type>(rs2_num, i); \
---
>   auto vs2 = P.VU.elt_val<type_sew_t<x>::type>(rs2_num, i); \
812c864
<   auto &vd = P.VU.elt<uint64_t>(rd_num, midx, true);
---
>   auto &vd = P.VU.elt_ref<uint64_t>(rd_num, midx, true);
815,817c867,869
<   auto vs2 = P.VU.elt<type_sew_t<x>::type>(rs2_num, i); \
<   auto vs1 = P.VU.elt<type_sew_t<x>::type>(rs1_num, i); \
<   auto &vd = P.VU.elt<uint64_t>(rd_num, midx, true);
---
>   auto vs2 = P.VU.elt_val<type_sew_t<x>::type>(rs2_num, i); \
>   auto vs1 = P.VU.elt_val<type_sew_t<x>::type>(rs1_num, i); \
>   auto &vd = P.VU.elt_ref<uint64_t>(rd_num, midx, true);
820c872
<   auto vs2 = P.VU.elt<type_sew_t<x>::type>(rs2_num, i); \
---
>   auto vs2 = P.VU.elt_val<type_sew_t<x>::type>(rs2_num, i); \
823c875
<   auto &vd = P.VU.elt<type_sew_t<x>::type>(rd_num, i, true);
---
>   auto &vd = P.VU.elt_ref<type_sew_t<x>::type>(rd_num, i, true);
826,828c878,880
<   auto vs2 = P.VU.elt<type_sew_t<x>::type>(rs2_num, i); \
<   auto vs1 = P.VU.elt<type_sew_t<x>::type>(rs1_num, i); \
<   auto &vd = P.VU.elt<type_sew_t<x>::type>(rd_num, i, true);
---
>   auto vs2 = P.VU.elt_val<type_sew_t<x>::type>(rs2_num, i); \
>   auto vs1 = P.VU.elt_val<type_sew_t<x>::type>(rs1_num, i); \
>   auto &vd = P.VU.elt_ref<type_sew_t<x>::type>(rd_num, i, true);
889a942
>   /*std::cout << "IN VI_VV_ULOOP_CMP start." << std::endl;*/\
890a944
>   /*std::cout << "IN VI_VV_ULOOP_CMP passed the VI_CHECK_MSS, sew is: " << std::hex << P.VU.vsew << std::endl;*/\
904a959
>   /*std::cout << "IN VI_VV_ULOOP_CMP passed VV_UCMP_PARAMS " << std::endl;*/\
968,969c1023,1024
<   auto &vd_0_des = P.VU.elt<type_sew_t<x>::type>(rd_num, 0, true); \
<   auto vd_0_res = P.VU.elt<type_sew_t<x>::type>(rs1_num, 0); \
---
>   auto &vd_0_des = P.VU.elt_ref<type_sew_t<x>::type>(rd_num, 0, true); \
>   auto vd_0_res = P.VU.elt_val<type_sew_t<x>::type>(rs1_num, 0); \
972c1027
<     auto vs2 = P.VU.elt<type_sew_t<x>::type>(rs2_num, i); \
---
>     auto vs2 = P.VU.elt_val<type_sew_t<x>::type>(rs2_num, i); \
999,1000c1054,1055
<   auto &vd_0_des = P.VU.elt<type_usew_t<x>::type>(rd_num, 0, true); \
<   auto vd_0_res = P.VU.elt<type_usew_t<x>::type>(rs1_num, 0); \
---
>   auto &vd_0_des = P.VU.elt_ref<type_usew_t<x>::type>(rd_num, 0, true); \
>   auto vd_0_res = P.VU.elt_val<type_usew_t<x>::type>(rs1_num, 0); \
1003c1058
<     auto vs2 = P.VU.elt<type_usew_t<x>::type>(rs2_num, i);
---
>     auto vs2 = P.VU.elt_val<type_usew_t<x>::type>(rs2_num, i);
1150,1151c1205,1206
<   type_usew_t<sew1>::type &vd = P.VU.elt<type_usew_t<sew1>::type>(rd_num, i, true); \
<   type_usew_t<sew2>::type vs2_u = P.VU.elt<type_usew_t<sew2>::type>(rs2_num, i); \
---
>   type_usew_t<sew1>::type &vd = P.VU.elt_ref<type_usew_t<sew1>::type>(rd_num, i, true); \
>   type_usew_t<sew2>::type vs2_u = P.VU.elt_val<type_usew_t<sew2>::type>(rs2_num, i); \
1153,1154c1208,1209
<   type_sew_t<sew2>::type vs2 = P.VU.elt<type_sew_t<sew2>::type>(rs2_num, i); \
<   type_sew_t<sew1>::type vs1 = P.VU.elt<type_sew_t<sew1>::type>(rs1_num, i); \
---
>   type_sew_t<sew2>::type vs2 = P.VU.elt_val<type_sew_t<sew2>::type>(rs2_num, i); \
>   type_sew_t<sew1>::type vs1 = P.VU.elt_val<type_sew_t<sew1>::type>(rs1_num, i); \
1249,1250c1304,1305
<     sign##16_t vd_w = P.VU.elt<sign##16_t>(rd_num, i); \
<     P.VU.elt<uint16_t>(rd_num, i, true) = \
---
>     sign##16_t vd_w = P.VU.elt_val<sign##16_t>(rd_num, i); \
>     P.VU.elt_ref<uint16_t>(rd_num, i, true) = \
1255,1256c1310,1311
<     sign##32_t vd_w = P.VU.elt<sign##32_t>(rd_num, i); \
<     P.VU.elt<uint32_t>(rd_num, i, true) = \
---
>     sign##32_t vd_w = P.VU.elt_val<sign##32_t>(rd_num, i); \
>     P.VU.elt_ref<uint32_t>(rd_num, i, true) = \
1261,1262c1316,1317
<     sign##64_t vd_w = P.VU.elt<sign##64_t>(rd_num, i); \
<     P.VU.elt<uint64_t>(rd_num, i, true) = \
---
>     sign##64_t vd_w = P.VU.elt_val<sign##64_t>(rd_num, i); \
>     P.VU.elt_ref<uint64_t>(rd_num, i, true) = \
1271,1272c1326,1327
<     sign_d##16_t vd_w = P.VU.elt<sign_d##16_t>(rd_num, i); \
<     P.VU.elt<uint16_t>(rd_num, i, true) = \
---
>     sign_d##16_t vd_w = P.VU.elt_val<sign_d##16_t>(rd_num, i); \
>     P.VU.elt_ref<uint16_t>(rd_num, i, true) = \
1277,1278c1332,1333
<     sign_d##32_t vd_w = P.VU.elt<sign_d##32_t>(rd_num, i); \
<     P.VU.elt<uint32_t>(rd_num, i, true) = \
---
>     sign_d##32_t vd_w = P.VU.elt_val<sign_d##32_t>(rd_num, i); \
>     P.VU.elt_ref<uint32_t>(rd_num, i, true) = \
1283,1284c1338,1339
<     sign_d##64_t vd_w = P.VU.elt<sign_d##64_t>(rd_num, i); \
<     P.VU.elt<uint64_t>(rd_num, i, true) = \
---
>     sign_d##64_t vd_w = P.VU.elt_val<sign_d##64_t>(rd_num, i); \
>     P.VU.elt_ref<uint64_t>(rd_num, i, true) = \
1293,1294c1348,1349
<     sign##16_t &vd_w = P.VU.elt<sign##16_t>(rd_num, i, true); \
<     sign##16_t vs2_w = P.VU.elt<sign##16_t>(rs2_num, i); \
---
>     sign##16_t &vd_w = P.VU.elt_ref<sign##16_t>(rd_num, i, true); \
>     sign##16_t vs2_w = P.VU.elt_val<sign##16_t>(rs2_num, i); \
1299,1300c1354,1355
<     sign##32_t &vd_w = P.VU.elt<sign##32_t>(rd_num, i, true); \
<     sign##32_t vs2_w = P.VU.elt<sign##32_t>(rs2_num, i); \
---
>     sign##32_t &vd_w = P.VU.elt_ref<sign##32_t>(rd_num, i, true); \
>     sign##32_t vs2_w = P.VU.elt_val<sign##32_t>(rs2_num, i); \
1305,1306c1360,1361
<     sign##64_t &vd_w = P.VU.elt<sign##64_t>(rd_num, i, true); \
<     sign##64_t vs2_w = P.VU.elt<sign##64_t>(rs2_num, i); \
---
>     sign##64_t &vd_w = P.VU.elt_ref<sign##64_t>(rd_num, i, true); \
>     sign##64_t vs2_w = P.VU.elt_val<sign##64_t>(rs2_num, i); \
1340,1341c1395,1396
<     sign##32_t vd_w = P.VU.elt<sign##32_t>(rd_num, i); \
<     P.VU.elt<uint32_t>(rd_num, i, true) = \
---
>     sign##32_t vd_w = P.VU.elt_val<sign##32_t>(rd_num, i); \
>     P.VU.elt_ref<uint32_t>(rd_num, i, true) = \
1346,1347c1401,1402
<     sign##64_t vd_w = P.VU.elt<sign##64_t>(rd_num, i); \
<     P.VU.elt<uint64_t>(rd_num, i, true) = \
---
>     sign##64_t vd_w = P.VU.elt_val<sign##64_t>(rd_num, i); \
>     P.VU.elt_ref<uint64_t>(rd_num, i, true) = \
1356,1357c1411,1412
<     sign_d##32_t vd_w = P.VU.elt<sign_d##32_t>(rd_num, i); \
<     P.VU.elt<uint32_t>(rd_num, i, true) = \
---
>     sign_d##32_t vd_w = P.VU.elt_val<sign_d##32_t>(rd_num, i); \
>     P.VU.elt_ref<uint32_t>(rd_num, i, true) = \
1362,1363c1417,1418
<     sign_d##64_t vd_w = P.VU.elt<sign_d##64_t>(rd_num, i); \
<     P.VU.elt<uint64_t>(rd_num, i, true) = \
---
>     sign_d##64_t vd_w = P.VU.elt_val<sign_d##64_t>(rd_num, i); \
>     P.VU.elt_ref<uint64_t>(rd_num, i, true) = \
1375,1376c1430,1431
<   auto &vd_0_des = P.VU.elt<type_sew_t<sew2>::type>(rd_num, 0, true); \
<   auto vd_0_res = P.VU.elt<type_sew_t<sew2>::type>(rs1_num, 0); \
---
>   auto &vd_0_des = P.VU.elt_ref<type_sew_t<sew2>::type>(rd_num, 0, true); \
>   auto vd_0_res = P.VU.elt_val<type_sew_t<sew2>::type>(rs1_num, 0); \
1379c1434
<     auto vs2 = P.VU.elt<type_sew_t<sew1>::type>(rs2_num, i);
---
>     auto vs2 = P.VU.elt_val<type_sew_t<sew1>::type>(rs2_num, i);
1403,1404c1458,1459
<   auto &vd_0_des = P.VU.elt<type_usew_t<sew2>::type>(rd_num, 0, true); \
<   auto vd_0_res = P.VU.elt<type_usew_t<sew2>::type>(rs1_num, 0); \
---
>   auto &vd_0_des = P.VU.elt_ref<type_usew_t<sew2>::type>(rd_num, 0, true); \
>   auto vd_0_res = P.VU.elt_val<type_usew_t<sew2>::type>(rs1_num, 0); \
1407c1462
<     auto vs2 = P.VU.elt<type_usew_t<sew1>::type>(rs2_num, i);
---
>     auto vs2 = P.VU.elt_val<type_usew_t<sew1>::type>(rs2_num, i);
1596c1651
<       index[i] = P.VU.elt<uint8_t>(reg_num, i); \
---
>       index[i] = P.VU.elt_val<uint8_t>(reg_num, i); \
1599c1654
<       index[i] = P.VU.elt<uint16_t>(reg_num, i); \
---
>       index[i] = P.VU.elt_val<uint16_t>(reg_num, i); \
1602c1657
<       index[i] = P.VU.elt<uint32_t>(reg_num, i); \
---
>       index[i] = P.VU.elt_val<uint32_t>(reg_num, i); \
1605c1660
<       index[i] = P.VU.elt<uint64_t>(reg_num, i); \
---
>       index[i] = P.VU.elt_val<uint64_t>(reg_num, i); \
1623c1678
<       P.VU.elt<elt_width##_t>(vd + fn * emul, vreg_inx, true) = val; \
---
>       P.VU.elt_ref<elt_width##_t>(vd + fn * emul, vreg_inx, true) = val; \
1644c1699
<           P.VU.elt<uint8_t>(vd + fn * flmul, vreg_inx, true) = \
---
>           P.VU.elt_ref<uint8_t>(vd + fn * flmul, vreg_inx, true) = \
1648c1703
<           P.VU.elt<uint16_t>(vd + fn * flmul, vreg_inx, true) = \
---
>           P.VU.elt_ref<uint16_t>(vd + fn * flmul, vreg_inx, true) = \
1652c1707
<           P.VU.elt<uint32_t>(vd + fn * flmul, vreg_inx, true) = \
---
>           P.VU.elt_ref<uint32_t>(vd + fn * flmul, vreg_inx, true) = \
1656c1711
<           P.VU.elt<uint64_t>(vd + fn * flmul, vreg_inx, true) = \
---
>           P.VU.elt_ref<uint64_t>(vd + fn * flmul, vreg_inx, true) = \
1675c1730
<       elt_width##_t val = P.VU.elt<elt_width##_t>(vs3 + fn * emul, vreg_inx); \
---
>       elt_width##_t val = P.VU.elt_val<elt_width##_t>(vs3 + fn * emul, vreg_inx); \
1699c1754
<           P.VU.elt<uint8_t>(vs3 + fn * flmul, vreg_inx)); \
---
>           P.VU.elt_val<uint8_t>(vs3 + fn * flmul, vreg_inx)); \
1703c1758
<           P.VU.elt<uint16_t>(vs3 + fn * flmul, vreg_inx)); \
---
>           P.VU.elt_val<uint16_t>(vs3 + fn * flmul, vreg_inx)); \
1707c1762
<           P.VU.elt<uint32_t>(vs3 + fn * flmul, vreg_inx)); \
---
>           P.VU.elt_val<uint32_t>(vs3 + fn * flmul, vreg_inx)); \
1711c1766
<           P.VU.elt<uint64_t>(vs3 + fn * flmul, vreg_inx)); \
---
>           P.VU.elt_val<uint64_t>(vs3 + fn * flmul, vreg_inx)); \
1743c1798
<       p->VU.elt<elt_width##_t>(rd_num + fn * emul, vreg_inx, true) = val; \
---
>       p->VU.elt_ref<elt_width##_t>(rd_num + fn * emul, vreg_inx, true) = val; \
1767c1822
<         P.VU.elt<elt_width ## _t>(vd + i, pos, true) = val; \
---
>         P.VU.elt_ref<elt_width ## _t>(vd + i, pos, true) = val; \
1776c1831
<         P.VU.elt<elt_width ## _t>(vd + i, pos, true) = val; \
---
>         P.VU.elt_ref<elt_width ## _t>(vd + i, pos, true) = val; \
1796c1851
<         auto val = P.VU.elt<uint8_t>(vs3 + i, pos); \
---
>         auto val = P.VU.elt_val<uint8_t>(vs3 + i, pos); \
1804c1859
<         auto val = P.VU.elt<uint8_t>(vs3 + i, pos); \
---
>         auto val = P.VU.elt_val<uint8_t>(vs3 + i, pos); \
1846c1901
<       auto vs3 = P.VU.elt< type ## 32_t>(vd, vreg_inx); \
---
>       auto vs3 = P.VU.elt_val< type ## 32_t>(vd, vreg_inx); \
1849c1904
<         P.VU.elt< type ## 32_t>(vd, vreg_inx, true) = val; \
---
>         P.VU.elt_ref< type ## 32_t>(vd, vreg_inx, true) = val; \
1853c1908
<       auto vs3 = P.VU.elt< type ## 64_t>(vd, vreg_inx); \
---
>       auto vs3 = P.VU.elt_val< type ## 64_t>(vd, vreg_inx); \
1856c1911
<         P.VU.elt< type ## 64_t>(vd, vreg_inx, true) = val; \
---
>         P.VU.elt_ref< type ## 64_t>(vd, vreg_inx, true) = val; \
1885c1940
<         P.VU.elt<type##16_t>(rd_num, i, true) = P.VU.elt<type##8_t>(rs2_num, i); \
---
>         P.VU.elt_ref<type##16_t>(rd_num, i, true) = P.VU.elt_val<type##8_t>(rs2_num, i); \
1888c1943
<         P.VU.elt<type##32_t>(rd_num, i, true) = P.VU.elt<type##8_t>(rs2_num, i); \
---
>         P.VU.elt_ref<type##32_t>(rd_num, i, true) = P.VU.elt_val<type##8_t>(rs2_num, i); \
1891c1946
<         P.VU.elt<type##64_t>(rd_num, i, true) = P.VU.elt<type##8_t>(rs2_num, i); \
---
>         P.VU.elt_ref<type##64_t>(rd_num, i, true) = P.VU.elt_val<type##8_t>(rs2_num, i); \
1894c1949
<         P.VU.elt<type##32_t>(rd_num, i, true) = P.VU.elt<type##16_t>(rs2_num, i); \
---
>         P.VU.elt_ref<type##32_t>(rd_num, i, true) = P.VU.elt_val<type##16_t>(rs2_num, i); \
1897c1952
<         P.VU.elt<type##64_t>(rd_num, i, true) = P.VU.elt<type##16_t>(rs2_num, i); \
---
>         P.VU.elt_ref<type##64_t>(rd_num, i, true) = P.VU.elt_val<type##16_t>(rs2_num, i); \
1900c1955
<         P.VU.elt<type##64_t>(rd_num, i, true) = P.VU.elt<type##32_t>(rs2_num, i); \
---
>         P.VU.elt_ref<type##64_t>(rd_num, i, true) = P.VU.elt_val<type##32_t>(rs2_num, i); \
1903c1958
<         P.VU.elt<type##64_t>(rd_num, i, true) = P.VU.elt<type##32_t>(rs2_num, i); \
---
>         P.VU.elt_ref<type##64_t>(rd_num, i, true) = P.VU.elt_val<type##32_t>(rs2_num, i); \
1913a1969
>   /*std::cout << "IN VI_VFP_COMMON about to check for fp and if vsew is 16 bits if EXT_ZFH is supported" << std::endl;*/\
1917a1974
>   /*std::cout << "IN VI_VFP_COMMON passed vsew and fp checks" << std::endl;*/\
1918a1976
>   /*std::cout << "IN VI_VFP_COMMON passed vector check" << std::endl;*/\
1936c1994
<     uint64_t &vdi = P.VU.elt<uint64_t>(rd_num, midx, true); \
---
>     uint64_t &vdi = P.VU.elt_ref<uint64_t>(rd_num, midx, true); \
1940,1941c1998,1999
<   float##width##_t vd_0 = P.VU.elt<float##width##_t>(rd_num, 0); \
<   float##width##_t vs1_0 = P.VU.elt<float##width##_t>(rs1_num, 0); \
---
>   float##width##_t vd_0 = P.VU.elt_val<float##width##_t>(rd_num, 0); \
>   float##width##_t vs1_0 = P.VU.elt_val<float##width##_t>(rs1_num, 0); \
1946c2004
<     float##width##_t vs2 = P.VU.elt<float##width##_t>(rs2_num, i); \
---
>     float##width##_t vs2 = P.VU.elt_val<float##width##_t>(rs2_num, i); \
1951c2009
<   float64_t vd_0 = f64(P.VU.elt<float64_t>(rs1_num, 0).v); \
---
>   float64_t vd_0 = f64(P.VU.elt_val<float64_t>(rs1_num, 0).v); \
1972c2030
<               P.VU.elt<uint16_t>(rd_num, 0, true) = defaultNaNF16UI; \
---
>               P.VU.elt_ref<uint16_t>(rd_num, 0, true) = defaultNaNF16UI; \
1974c2032
<               P.VU.elt<uint16_t>(rd_num, 0, true) = vd_0.v; \
---
>               P.VU.elt_ref<uint16_t>(rd_num, 0, true) = vd_0.v; \
1985c2043
<               P.VU.elt<uint32_t>(rd_num, 0, true) = defaultNaNF32UI; \
---
>               P.VU.elt_ref<uint32_t>(rd_num, 0, true) = defaultNaNF32UI; \
1987c2045
<               P.VU.elt<uint32_t>(rd_num, 0, true) = vd_0.v; \
---
>               P.VU.elt_ref<uint32_t>(rd_num, 0, true) = vd_0.v; \
1998c2056
<               P.VU.elt<uint64_t>(rd_num, 0, true) = defaultNaNF64UI; \
---
>               P.VU.elt_ref<uint64_t>(rd_num, 0, true) = defaultNaNF64UI; \
2000c2058
<               P.VU.elt<uint64_t>(rd_num, 0, true) = vd_0.v; \
---
>               P.VU.elt_ref<uint64_t>(rd_num, 0, true) = vd_0.v; \
2006c2064
<       P.VU.elt<type_sew_t<x>::type>(rd_num, 0, true) = vd_0.v; \
---
>       P.VU.elt_ref<type_sew_t<x>::type>(rd_num, 0, true) = vd_0.v; \
2030,2032c2088,2090
<       float16_t &vd = P.VU.elt<float16_t>(rd_num, i, true); \
<       float16_t vs1 = P.VU.elt<float16_t>(rs1_num, i); \
<       float16_t vs2 = P.VU.elt<float16_t>(rs2_num, i); \
---
>       float16_t &vd = P.VU.elt_ref<float16_t>(rd_num, i, true); \
>       float16_t vs1 = P.VU.elt_val<float16_t>(rs1_num, i); \
>       float16_t vs2 = P.VU.elt_val<float16_t>(rs2_num, i); \
2038,2040c2096,2098
<       float32_t &vd = P.VU.elt<float32_t>(rd_num, i, true); \
<       float32_t vs1 = P.VU.elt<float32_t>(rs1_num, i); \
<       float32_t vs2 = P.VU.elt<float32_t>(rs2_num, i); \
---
>       float32_t &vd = P.VU.elt_ref<float32_t>(rd_num, i, true); \
>       float32_t vs1 = P.VU.elt_val<float32_t>(rs1_num, i); \
>       float32_t vs2 = P.VU.elt_val<float32_t>(rs2_num, i); \
2046,2048c2104,2106
<       float64_t &vd = P.VU.elt<float64_t>(rd_num, i, true); \
<       float64_t vs1 = P.VU.elt<float64_t>(rs1_num, i); \
<       float64_t vs2 = P.VU.elt<float64_t>(rs2_num, i); \
---
>       float64_t &vd = P.VU.elt_ref<float64_t>(rd_num, i, true); \
>       float64_t vs1 = P.VU.elt_val<float64_t>(rs1_num, i); \
>       float64_t vs2 = P.VU.elt_val<float64_t>(rs2_num, i); \
2065,2066c2123,2124
<       float16_t &vd = P.VU.elt<float16_t>(rd_num, i, true); \
<       float16_t vs2 = P.VU.elt<float16_t>(rs2_num, i); \
---
>       float16_t &vd = P.VU.elt_ref<float16_t>(rd_num, i, true); \
>       float16_t vs2 = P.VU.elt_val<float16_t>(rs2_num, i); \
2071,2072c2129,2130
<       float32_t &vd = P.VU.elt<float32_t>(rd_num, i, true); \
<       float32_t vs2 = P.VU.elt<float32_t>(rs2_num, i); \
---
>       float32_t &vd = P.VU.elt_ref<float32_t>(rd_num, i, true); \
>       float32_t vs2 = P.VU.elt_val<float32_t>(rs2_num, i); \
2077,2078c2135,2136
<       float64_t &vd = P.VU.elt<float64_t>(rd_num, i, true); \
<       float64_t vs2 = P.VU.elt<float64_t>(rs2_num, i); \
---
>       float64_t &vd = P.VU.elt_ref<float64_t>(rd_num, i, true); \
>       float64_t vs2 = P.VU.elt_val<float64_t>(rs2_num, i); \
2119a2178,2180
>   /*std::cout << "IN VI_VFP_VV_LOOP_WIDE_REDUCTION and P.VU.vsew is:" << std::hex << P.VU.vsew  << std::endl;*/\
>   /*std::cout << "IN VI_VFP_VV_LOOP_WIDE_REDUCTION and p supports F?:" << p->supports_extension('F')  << std::endl;*/\
>   /*std::cout << "IN VI_VFP_VV_LOOP_WIDE_REDUCTION and p supports D?:" << p->supports_extension('D')  << std::endl;*/\
2120a2182
>   /*std::cout << "IN VI_VFP_VV_LOOP_WIDE_REDUCTION going to call common." << std::endl;*/\
2124a2187
>   /*std::cout << "IN VI_VFP_VV_LOOP_WIDE_REDUCTION passed the checks." << std::endl;*/\
2127c2190
<       float32_t vd_0 = P.VU.elt<float32_t>(rs1_num, 0); \
---
>       float32_t vd_0 = P.VU.elt_val<float32_t>(rs1_num, 0); \
2131c2194
<         float32_t vs2 = f16_to_f32(P.VU.elt<float16_t>(rs2_num, i)); \
---
>         float32_t vs2 = f16_to_f32(P.VU.elt_val<float16_t>(rs2_num, i)); \
2132a2196
>   	/*std::cout << "IN VI_VFP_VV_LOOP_WIDE_REDUCTION gonna check fp exceptions." << std::endl;*/\
2133a2198
>   	/*std::cout << "IN VI_VFP_VV_LOOP_WIDE_REDUCTION passed fp exceptions check." << std::endl;*/\
2138c2203
<       float64_t vd_0 = P.VU.elt<float64_t>(rs1_num, 0); \
---
>       float64_t vd_0 = P.VU.elt_val<float64_t>(rs1_num, 0); \
2142c2207
<         float64_t vs2 = f32_to_f64(P.VU.elt<float32_t>(rs2_num, i)); \
---
>         float64_t vs2 = f32_to_f64(P.VU.elt_val<float32_t>(rs2_num, i)); \
2143a2209
>   	/*std::cout << "IN VI_VFP_VV_LOOP_WIDE_REDUCTION gonna check fp exceptions." << std::endl;*/\
2144a2211
>   	/*std::cout << "IN VI_VFP_VV_LOOP_WIDE_REDUCTION passed fp exceptions check." << std::endl;*/\
2148a2216
>       /* std::cout << "IN VI_VFP_VV_LOOP_WIDE_REDUCTION and P.VU.vsew doesn't match an active case. it is instead:" << std::hex << P.VU.vsew  << std::endl;*/\
2158c2226
<       float16_t &vd = P.VU.elt<float16_t>(rd_num, i, true); \
---
>       float16_t &vd = P.VU.elt_ref<float16_t>(rd_num, i, true); \
2160c2228
<       float16_t vs2 = P.VU.elt<float16_t>(rs2_num, i); \
---
>       float16_t vs2 = P.VU.elt_val<float16_t>(rs2_num, i); \
2166c2234
<       float32_t &vd = P.VU.elt<float32_t>(rd_num, i, true); \
---
>       float32_t &vd = P.VU.elt_ref<float32_t>(rd_num, i, true); \
2168c2236
<       float32_t vs2 = P.VU.elt<float32_t>(rs2_num, i); \
---
>       float32_t vs2 = P.VU.elt_val<float32_t>(rs2_num, i); \
2174c2242
<       float64_t &vd = P.VU.elt<float64_t>(rd_num, i, true); \
---
>       float64_t &vd = P.VU.elt_ref<float64_t>(rd_num, i, true); \
2176c2244
<       float64_t vs2 = P.VU.elt<float64_t>(rs2_num, i); \
---
>       float64_t vs2 = P.VU.elt_val<float64_t>(rs2_num, i); \
2193,2194c2261,2262
<       float16_t vs2 = P.VU.elt<float16_t>(rs2_num, i); \
<       float16_t vs1 = P.VU.elt<float16_t>(rs1_num, i); \
---
>       float16_t vs2 = P.VU.elt_val<float16_t>(rs2_num, i); \
>       float16_t vs1 = P.VU.elt_val<float16_t>(rs1_num, i); \
2201,2202c2269,2270
<       float32_t vs2 = P.VU.elt<float32_t>(rs2_num, i); \
<       float32_t vs1 = P.VU.elt<float32_t>(rs1_num, i); \
---
>       float32_t vs2 = P.VU.elt_val<float32_t>(rs2_num, i); \
>       float32_t vs1 = P.VU.elt_val<float32_t>(rs1_num, i); \
2209,2210c2277,2278
<       float64_t vs2 = P.VU.elt<float64_t>(rs2_num, i); \
<       float64_t vs1 = P.VU.elt<float64_t>(rs1_num, i); \
---
>       float64_t vs2 = P.VU.elt_val<float64_t>(rs2_num, i); \
>       float64_t vs1 = P.VU.elt_val<float64_t>(rs1_num, i); \
2227,2228c2295,2296
<       float32_t &vd = P.VU.elt<float32_t>(rd_num, i, true); \
<       float32_t vs2 = f16_to_f32(P.VU.elt<float16_t>(rs2_num, i)); \
---
>       float32_t &vd = P.VU.elt_ref<float32_t>(rd_num, i, true); \
>       float32_t vs2 = f16_to_f32(P.VU.elt_val<float16_t>(rs2_num, i)); \
2235,2236c2303,2304
<       float64_t &vd = P.VU.elt<float64_t>(rd_num, i, true); \
<       float64_t vs2 = f32_to_f64(P.VU.elt<float32_t>(rs2_num, i)); \
---
>       float64_t &vd = P.VU.elt_ref<float64_t>(rd_num, i, true); \
>       float64_t vs2 = f32_to_f64(P.VU.elt_val<float32_t>(rs2_num, i)); \
2255,2257c2323,2325
<       float32_t &vd = P.VU.elt<float32_t>(rd_num, i, true); \
<       float32_t vs2 = f16_to_f32(P.VU.elt<float16_t>(rs2_num, i)); \
<       float32_t vs1 = f16_to_f32(P.VU.elt<float16_t>(rs1_num, i)); \
---
>       float32_t &vd = P.VU.elt_ref<float32_t>(rd_num, i, true); \
>       float32_t vs2 = f16_to_f32(P.VU.elt_val<float16_t>(rs2_num, i)); \
>       float32_t vs1 = f16_to_f32(P.VU.elt_val<float16_t>(rs1_num, i)); \
2263,2265c2331,2333
<       float64_t &vd = P.VU.elt<float64_t>(rd_num, i, true); \
<       float64_t vs2 = f32_to_f64(P.VU.elt<float32_t>(rs2_num, i)); \
<       float64_t vs1 = f32_to_f64(P.VU.elt<float32_t>(rs1_num, i)); \
---
>       float64_t &vd = P.VU.elt_ref<float64_t>(rd_num, i, true); \
>       float64_t vs2 = f32_to_f64(P.VU.elt_val<float32_t>(rs2_num, i)); \
>       float64_t vs1 = f32_to_f64(P.VU.elt_val<float32_t>(rs1_num, i)); \
2282,2283c2350,2351
<       float32_t &vd = P.VU.elt<float32_t>(rd_num, i, true); \
<       float32_t vs2 = P.VU.elt<float32_t>(rs2_num, i); \
---
>       float32_t &vd = P.VU.elt_ref<float32_t>(rd_num, i, true); \
>       float32_t vs2 = P.VU.elt_val<float32_t>(rs2_num, i); \
2290,2291c2358,2359
<       float64_t &vd = P.VU.elt<float64_t>(rd_num, i, true); \
<       float64_t vs2 = P.VU.elt<float64_t>(rs2_num, i); \
---
>       float64_t &vd = P.VU.elt_ref<float64_t>(rd_num, i, true); \
>       float64_t vs2 = P.VU.elt_val<float64_t>(rs2_num, i); \
2308,2310c2376,2378
<       float32_t &vd = P.VU.elt<float32_t>(rd_num, i, true); \
<       float32_t vs2 = P.VU.elt<float32_t>(rs2_num, i); \
<       float32_t vs1 = f16_to_f32(P.VU.elt<float16_t>(rs1_num, i)); \
---
>       float32_t &vd = P.VU.elt_ref<float32_t>(rd_num, i, true); \
>       float32_t vs2 = P.VU.elt_val<float32_t>(rs2_num, i); \
>       float32_t vs1 = f16_to_f32(P.VU.elt_val<float16_t>(rs1_num, i)); \
2316,2318c2384,2386
<       float64_t &vd = P.VU.elt<float64_t>(rd_num, i, true); \
<       float64_t vs2 = P.VU.elt<float64_t>(rs2_num, i); \
<       float64_t vs1 = f32_to_f64(P.VU.elt<float32_t>(rs1_num, i)); \
---
>       float64_t &vd = P.VU.elt_ref<float64_t>(rd_num, i, true); \
>       float64_t vs2 = P.VU.elt_val<float64_t>(rs2_num, i); \
>       float64_t vs1 = f32_to_f64(P.VU.elt_val<float32_t>(rs1_num, i)); \
